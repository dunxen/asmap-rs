<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="597.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="597.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[stack]] (3 samples, 0.24%)</title><rect x="0.0000%" y="533" width="0.2364%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="543.50"></text></g><g><title>__libc_write (3 samples, 0.24%)</title><rect x="0.0000%" y="517" width="0.2364%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="0.0000%" y="501" width="0.2364%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="511.50"></text></g><g><title>[anon] (5 samples, 0.39%)</title><rect x="0.2364%" y="533" width="0.3940%" height="15" fill="rgb(248,212,6)"/><text x="0.4864%" y="543.50"></text></g><g><title>tokio::runtime::basic_scheduler::SchedulerPriv::schedule (5 samples, 0.39%)</title><rect x="0.2364%" y="517" width="0.3940%" height="15" fill="rgb(208,68,35)"/><text x="0.4864%" y="527.50"></text></g><g><title>&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (5 samples, 0.39%)</title><rect x="0.2364%" y="501" width="0.3940%" height="15" fill="rgb(232,128,0)"/><text x="0.4864%" y="511.50"></text></g><g><title>mio::poll::SetReadiness::set_readiness (5 samples, 0.39%)</title><rect x="0.2364%" y="485" width="0.3940%" height="15" fill="rgb(207,160,47)"/><text x="0.4864%" y="495.50"></text></g><g><title>mio::poll::enqueue_with_wakeup (5 samples, 0.39%)</title><rect x="0.2364%" y="469" width="0.3940%" height="15" fill="rgb(228,23,34)"/><text x="0.4864%" y="479.50"></text></g><g><title>mio::sys::unix::awakener::pipe::Awakener::wakeup (5 samples, 0.39%)</title><rect x="0.2364%" y="453" width="0.3940%" height="15" fill="rgb(218,30,26)"/><text x="0.4864%" y="463.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (5 samples, 0.39%)</title><rect x="0.2364%" y="437" width="0.3940%" height="15" fill="rgb(220,122,19)"/><text x="0.4864%" y="447.50"></text></g><g><title>std::sys::unix::fs::File::write (5 samples, 0.39%)</title><rect x="0.2364%" y="421" width="0.3940%" height="15" fill="rgb(250,228,42)"/><text x="0.4864%" y="431.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (5 samples, 0.39%)</title><rect x="0.2364%" y="405" width="0.3940%" height="15" fill="rgb(240,193,28)"/><text x="0.4864%" y="415.50"></text></g><g><title>__libc_write (5 samples, 0.39%)</title><rect x="0.2364%" y="389" width="0.3940%" height="15" fill="rgb(216,20,37)"/><text x="0.4864%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.39%)</title><rect x="0.2364%" y="373" width="0.3940%" height="15" fill="rgb(206,188,39)"/><text x="0.4864%" y="383.50"></text></g><g><title>__GI___libc_free (4 samples, 0.32%)</title><rect x="9.4563%" y="341" width="0.3152%" height="15" fill="rgb(217,207,13)"/><text x="9.7063%" y="351.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (34 samples, 2.68%)</title><rect x="7.3286%" y="357" width="2.6793%" height="15" fill="rgb(231,73,38)"/><text x="7.5786%" y="367.50">fu..</text></g><g><title>_int_free (3 samples, 0.24%)</title><rect x="9.7715%" y="341" width="0.2364%" height="15" fill="rgb(225,20,46)"/><text x="10.0215%" y="351.50"></text></g><g><title>[unknown] (17 samples, 1.34%)</title><rect x="11.2687%" y="197" width="1.3396%" height="15" fill="rgb(210,31,41)"/><text x="11.5187%" y="207.50"></text></g><g><title>[unknown] (17 samples, 1.34%)</title><rect x="11.2687%" y="181" width="1.3396%" height="15" fill="rgb(221,200,47)"/><text x="11.5187%" y="191.50"></text></g><g><title>[unknown] (13 samples, 1.02%)</title><rect x="11.5839%" y="165" width="1.0244%" height="15" fill="rgb(226,26,5)"/><text x="11.8339%" y="175.50"></text></g><g><title>[unknown] (9 samples, 0.71%)</title><rect x="11.8991%" y="149" width="0.7092%" height="15" fill="rgb(249,33,26)"/><text x="12.1491%" y="159.50"></text></g><g><title>[unknown] (8 samples, 0.63%)</title><rect x="11.9779%" y="133" width="0.6304%" height="15" fill="rgb(235,183,28)"/><text x="12.2279%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.39%)</title><rect x="12.2143%" y="117" width="0.3940%" height="15" fill="rgb(221,5,38)"/><text x="12.4643%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="12.4507%" y="101" width="0.1576%" height="15" fill="rgb(247,18,42)"/><text x="12.7007%" y="111.50"></text></g><g><title>&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (28 samples, 2.21%)</title><rect x="10.5595%" y="325" width="2.2065%" height="15" fill="rgb(241,131,45)"/><text x="10.8095%" y="335.50">&lt;..</text></g><g><title>mio::poll::SetReadiness::set_readiness (23 samples, 1.81%)</title><rect x="10.9535%" y="309" width="1.8125%" height="15" fill="rgb(249,31,29)"/><text x="11.2035%" y="319.50">m..</text></g><g><title>mio::poll::enqueue_with_wakeup (23 samples, 1.81%)</title><rect x="10.9535%" y="293" width="1.8125%" height="15" fill="rgb(225,111,53)"/><text x="11.2035%" y="303.50">m..</text></g><g><title>mio::sys::unix::awakener::pipe::Awakener::wakeup (21 samples, 1.65%)</title><rect x="11.1111%" y="277" width="1.6548%" height="15" fill="rgb(238,160,17)"/><text x="11.3611%" y="287.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (21 samples, 1.65%)</title><rect x="11.1111%" y="261" width="1.6548%" height="15" fill="rgb(214,148,48)"/><text x="11.3611%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::write (20 samples, 1.58%)</title><rect x="11.1899%" y="245" width="1.5760%" height="15" fill="rgb(232,36,49)"/><text x="11.4399%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (20 samples, 1.58%)</title><rect x="11.1899%" y="229" width="1.5760%" height="15" fill="rgb(209,103,24)"/><text x="11.4399%" y="239.50"></text></g><g><title>__libc_write (20 samples, 1.58%)</title><rect x="11.1899%" y="213" width="1.5760%" height="15" fill="rgb(229,88,8)"/><text x="11.4399%" y="223.50"></text></g><g><title>__pthread_enable_asynccancel (2 samples, 0.16%)</title><rect x="12.6084%" y="197" width="0.1576%" height="15" fill="rgb(213,181,19)"/><text x="12.8584%" y="207.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (2 samples, 0.16%)</title><rect x="12.7660%" y="325" width="0.1576%" height="15" fill="rgb(254,191,54)"/><text x="13.0160%" y="335.50"></text></g><g><title>__GI___pthread_mutex_lock (6 samples, 0.47%)</title><rect x="12.9236%" y="325" width="0.4728%" height="15" fill="rgb(241,83,37)"/><text x="13.1736%" y="335.50"></text></g><g><title>tokio::runtime::basic_scheduler::SchedulerPriv::schedule (43 samples, 3.39%)</title><rect x="10.1655%" y="341" width="3.3885%" height="15" fill="rgb(233,36,39)"/><text x="10.4155%" y="351.50">tok..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (2 samples, 0.16%)</title><rect x="13.3964%" y="325" width="0.1576%" height="15" fill="rgb(226,3,54)"/><text x="13.6464%" y="335.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (93 samples, 7.33%)</title><rect x="6.3830%" y="373" width="7.3286%" height="15" fill="rgb(245,192,40)"/><text x="6.6330%" y="383.50">futures_ch..</text></g><g><title>tokio::task::waker::wake_by_val (46 samples, 3.62%)</title><rect x="10.0867%" y="357" width="3.6249%" height="15" fill="rgb(238,167,29)"/><text x="10.3367%" y="367.50">toki..</text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (125 samples, 9.85%)</title><rect x="4.4129%" y="421" width="9.8503%" height="15" fill="rgb(232,182,51)"/><text x="4.6629%" y="431.50">&lt;hyper::body::..</text></g><g><title>hyper::body::body::Body::poll_inner (115 samples, 9.06%)</title><rect x="5.2009%" y="405" width="9.0623%" height="15" fill="rgb(231,60,39)"/><text x="5.4509%" y="415.50">hyper::body::..</text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (106 samples, 8.35%)</title><rect x="5.9102%" y="389" width="8.3530%" height="15" fill="rgb(208,69,12)"/><text x="6.1602%" y="399.50">&lt;futures_cha..</text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (7 samples, 0.55%)</title><rect x="13.7116%" y="373" width="0.5516%" height="15" fill="rgb(235,93,37)"/><text x="13.9616%" y="383.50"></text></g><g><title>futures_task::waker::clone_arc_raw (2 samples, 0.16%)</title><rect x="14.1056%" y="357" width="0.1576%" height="15" fill="rgb(213,116,39)"/><text x="14.3556%" y="367.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as futures_core::stream::Stream&gt;::poll_next (137 samples, 10.80%)</title><rect x="3.8613%" y="453" width="10.7959%" height="15" fill="rgb(222,207,29)"/><text x="4.1113%" y="463.50">&lt;reqwest::async_..</text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (132 samples, 10.40%)</title><rect x="4.2553%" y="437" width="10.4019%" height="15" fill="rgb(206,96,30)"/><text x="4.5053%" y="447.50">&lt;reqwest::async..</text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (5 samples, 0.39%)</title><rect x="14.2632%" y="421" width="0.3940%" height="15" fill="rgb(218,138,4)"/><text x="14.5132%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned (3 samples, 0.24%)</title><rect x="14.6572%" y="453" width="0.2364%" height="15" fill="rgb(250,191,14)"/><text x="14.9072%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (49 samples, 3.86%)</title><rect x="14.8936%" y="453" width="3.8613%" height="15" fill="rgb(239,60,40)"/><text x="15.1436%" y="463.50">__me..</text></g><g><title>__pthread_mutex_unlock_usercnt (6 samples, 0.47%)</title><rect x="18.7549%" y="453" width="0.4728%" height="15" fill="rgb(206,27,48)"/><text x="19.0049%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.47%)</title><rect x="18.7549%" y="437" width="0.4728%" height="15" fill="rgb(225,35,8)"/><text x="19.0049%" y="447.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (7 samples, 0.55%)</title><rect x="19.2277%" y="453" width="0.5516%" height="15" fill="rgb(250,213,24)"/><text x="19.4777%" y="463.50"></text></g><g><title>&lt;futures_util::stream::try_stream::into_async_read::IntoAsyncRead&lt;St&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (224 samples, 17.65%)</title><rect x="2.6005%" y="469" width="17.6517%" height="15" fill="rgb(247,123,22)"/><text x="2.8505%" y="479.50">&lt;futures_util::stream::try_..</text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (6 samples, 0.47%)</title><rect x="19.7794%" y="453" width="0.4728%" height="15" fill="rgb(231,138,38)"/><text x="20.0294%" y="463.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (2 samples, 0.16%)</title><rect x="20.2522%" y="469" width="0.1576%" height="15" fill="rgb(231,145,46)"/><text x="20.5022%" y="479.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.55%)</title><rect x="20.4098%" y="469" width="0.5516%" height="15" fill="rgb(251,118,11)"/><text x="20.6598%" y="479.50"></text></g><g><title>_int_free (3 samples, 0.24%)</title><rect x="21.3554%" y="453" width="0.2364%" height="15" fill="rgb(217,147,25)"/><text x="21.6054%" y="463.50"></text></g><g><title>futures_task::waker::drop_arc_raw (9 samples, 0.71%)</title><rect x="21.0402%" y="469" width="0.7092%" height="15" fill="rgb(247,81,37)"/><text x="21.2902%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="21.5918%" y="453" width="0.1576%" height="15" fill="rgb(209,12,38)"/><text x="21.8418%" y="463.50"></text></g><g><title>std::sys_common::thread_info::ThreadInfo::with::_{{closure}} (2 samples, 0.16%)</title><rect x="21.7494%" y="469" width="0.1576%" height="15" fill="rgb(227,1,9)"/><text x="21.9994%" y="479.50"></text></g><g><title>std::sys_common::thread_info::current_thread::_{{closure}} (2 samples, 0.16%)</title><rect x="21.7494%" y="453" width="0.1576%" height="15" fill="rgb(248,47,43)"/><text x="21.9994%" y="463.50"></text></g><g><title>&lt;std::thread::Thread as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="21.7494%" y="437" width="0.1576%" height="15" fill="rgb(221,10,30)"/><text x="21.9994%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="21.7494%" y="421" width="0.1576%" height="15" fill="rgb(210,229,1)"/><text x="21.9994%" y="431.50"></text></g><g><title>std::thread::current (3 samples, 0.24%)</title><rect x="21.9070%" y="469" width="0.2364%" height="15" fill="rgb(222,148,37)"/><text x="22.1570%" y="479.50"></text></g><g><title>std::sys_common::thread_info::current_thread (3 samples, 0.24%)</title><rect x="21.9070%" y="453" width="0.2364%" height="15" fill="rgb(234,67,33)"/><text x="22.1570%" y="463.50"></text></g><g><title>std::sys_common::thread_info::ThreadInfo::with (3 samples, 0.24%)</title><rect x="21.9070%" y="437" width="0.2364%" height="15" fill="rgb(247,98,35)"/><text x="22.1570%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.24%)</title><rect x="21.9070%" y="421" width="0.2364%" height="15" fill="rgb(247,138,52)"/><text x="22.1570%" y="431.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (2 samples, 0.16%)</title><rect x="21.9858%" y="405" width="0.1576%" height="15" fill="rgb(213,79,30)"/><text x="22.2358%" y="415.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.16%)</title><rect x="21.9858%" y="389" width="0.1576%" height="15" fill="rgb(246,177,23)"/><text x="22.2358%" y="399.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (2 samples, 0.16%)</title><rect x="21.9858%" y="373" width="0.1576%" height="15" fill="rgb(230,62,27)"/><text x="22.2358%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.16%)</title><rect x="21.9858%" y="357" width="0.1576%" height="15" fill="rgb(216,154,8)"/><text x="22.2358%" y="367.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (15 samples, 1.18%)</title><rect x="22.3010%" y="453" width="1.1820%" height="15" fill="rgb(244,35,45)"/><text x="22.5510%" y="463.50"></text></g><g><title>[unknown] (15 samples, 1.18%)</title><rect x="22.3010%" y="437" width="1.1820%" height="15" fill="rgb(251,115,12)"/><text x="22.5510%" y="447.50"></text></g><g><title>[unknown] (14 samples, 1.10%)</title><rect x="22.3798%" y="421" width="1.1032%" height="15" fill="rgb(240,54,50)"/><text x="22.6298%" y="431.50"></text></g><g><title>[unknown] (13 samples, 1.02%)</title><rect x="22.4586%" y="405" width="1.0244%" height="15" fill="rgb(233,84,52)"/><text x="22.7086%" y="415.50"></text></g><g><title>[unknown] (10 samples, 0.79%)</title><rect x="22.6950%" y="389" width="0.7880%" height="15" fill="rgb(207,117,47)"/><text x="22.9450%" y="399.50"></text></g><g><title>[unknown] (7 samples, 0.55%)</title><rect x="22.9314%" y="373" width="0.5516%" height="15" fill="rgb(249,43,39)"/><text x="23.1814%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.32%)</title><rect x="23.1678%" y="357" width="0.3152%" height="15" fill="rgb(209,38,44)"/><text x="23.4178%" y="367.50"></text></g><g><title>std::sync::condvar::Condvar::verify (3 samples, 0.24%)</title><rect x="23.4831%" y="437" width="0.2364%" height="15" fill="rgb(236,212,23)"/><text x="23.7331%" y="447.50"></text></g><g><title>__clock_gettime_2 (7 samples, 0.55%)</title><rect x="24.0347%" y="405" width="0.5516%" height="15" fill="rgb(242,79,21)"/><text x="24.2847%" y="415.50"></text></g><g><title>__vdso_clock_gettime (6 samples, 0.47%)</title><rect x="24.1135%" y="389" width="0.4728%" height="15" fill="rgb(211,96,35)"/><text x="24.3635%" y="399.50"></text></g><g><title>[[vdso]] (6 samples, 0.47%)</title><rect x="24.1135%" y="373" width="0.4728%" height="15" fill="rgb(253,215,40)"/><text x="24.3635%" y="383.50"></text></g><g><title>[unknown] (16 samples, 1.26%)</title><rect x="26.0835%" y="389" width="1.2608%" height="15" fill="rgb(211,81,21)"/><text x="26.3335%" y="399.50"></text></g><g><title>[unknown] (16 samples, 1.26%)</title><rect x="26.0835%" y="373" width="1.2608%" height="15" fill="rgb(208,190,38)"/><text x="26.3335%" y="383.50"></text></g><g><title>[unknown] (16 samples, 1.26%)</title><rect x="26.0835%" y="357" width="1.2608%" height="15" fill="rgb(235,213,38)"/><text x="26.3335%" y="367.50"></text></g><g><title>[unknown] (14 samples, 1.10%)</title><rect x="26.2411%" y="341" width="1.1032%" height="15" fill="rgb(237,122,38)"/><text x="26.4911%" y="351.50"></text></g><g><title>[unknown] (9 samples, 0.71%)</title><rect x="26.6351%" y="325" width="0.7092%" height="15" fill="rgb(244,218,35)"/><text x="26.8851%" y="335.50"></text></g><g><title>[unknown] (7 samples, 0.55%)</title><rect x="26.7928%" y="309" width="0.5516%" height="15" fill="rgb(240,68,47)"/><text x="27.0428%" y="319.50"></text></g><g><title>__condvar_confirm_wakeup (3 samples, 0.24%)</title><rect x="27.3444%" y="389" width="0.2364%" height="15" fill="rgb(210,16,53)"/><text x="27.5944%" y="399.50"></text></g><g><title>__condvar_dec_grefs (6 samples, 0.47%)</title><rect x="27.5808%" y="389" width="0.4728%" height="15" fill="rgb(235,124,12)"/><text x="27.8308%" y="399.50"></text></g><g><title>__pthread_cleanup_pop (7 samples, 0.55%)</title><rect x="28.0536%" y="389" width="0.5516%" height="15" fill="rgb(224,169,11)"/><text x="28.3036%" y="399.50"></text></g><g><title>__pthread_disable_asynccancel (3 samples, 0.24%)</title><rect x="28.6052%" y="389" width="0.2364%" height="15" fill="rgb(250,166,2)"/><text x="28.8552%" y="399.50"></text></g><g><title>__pthread_mutex_cond_lock (2 samples, 0.16%)</title><rect x="28.8416%" y="389" width="0.1576%" height="15" fill="rgb(242,216,29)"/><text x="29.0916%" y="399.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (69 samples, 5.44%)</title><rect x="23.7195%" y="437" width="5.4374%" height="15" fill="rgb(230,116,27)"/><text x="23.9695%" y="447.50">std::sy..</text></g><g><title>std::sys::unix::condvar::Condvar::wait_timeout (69 samples, 5.44%)</title><rect x="23.7195%" y="421" width="5.4374%" height="15" fill="rgb(228,99,48)"/><text x="23.9695%" y="431.50">std::sy..</text></g><g><title>__pthread_cond_timedwait (58 samples, 4.57%)</title><rect x="24.5863%" y="405" width="4.5705%" height="15" fill="rgb(253,11,6)"/><text x="24.8363%" y="415.50">__pth..</text></g><g><title>__pthread_mutex_unlock_usercnt (2 samples, 0.16%)</title><rect x="28.9992%" y="389" width="0.1576%" height="15" fill="rgb(247,143,39)"/><text x="29.2492%" y="399.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (73 samples, 5.75%)</title><rect x="23.4831%" y="453" width="5.7526%" height="15" fill="rgb(236,97,10)"/><text x="23.7331%" y="463.50">std::sy..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.16%)</title><rect x="29.2356%" y="453" width="0.1576%" height="15" fill="rgb(233,208,19)"/><text x="29.4856%" y="463.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (2 samples, 0.16%)</title><rect x="29.2356%" y="437" width="0.1576%" height="15" fill="rgb(216,164,2)"/><text x="29.4856%" y="447.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (2 samples, 0.16%)</title><rect x="29.2356%" y="421" width="0.1576%" height="15" fill="rgb(220,129,5)"/><text x="29.4856%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (2 samples, 0.16%)</title><rect x="29.2356%" y="405" width="0.1576%" height="15" fill="rgb(242,17,10)"/><text x="29.4856%" y="415.50"></text></g><g><title>std::thread::park_timeout (93 samples, 7.33%)</title><rect x="22.1434%" y="469" width="7.3286%" height="15" fill="rgb(242,107,0)"/><text x="22.3934%" y="479.50">std::threa..</text></g><g><title>std::time::Instant::now (22 samples, 1.73%)</title><rect x="29.4720%" y="469" width="1.7336%" height="15" fill="rgb(251,28,31)"/><text x="29.7220%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (21 samples, 1.65%)</title><rect x="29.5508%" y="453" width="1.6548%" height="15" fill="rgb(233,223,10)"/><text x="29.8008%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (21 samples, 1.65%)</title><rect x="29.5508%" y="437" width="1.6548%" height="15" fill="rgb(215,21,27)"/><text x="29.8008%" y="447.50"></text></g><g><title>__clock_gettime_2 (17 samples, 1.34%)</title><rect x="29.8660%" y="421" width="1.3396%" height="15" fill="rgb(232,23,21)"/><text x="30.1160%" y="431.50"></text></g><g><title>__vdso_clock_gettime (14 samples, 1.10%)</title><rect x="30.1024%" y="405" width="1.1032%" height="15" fill="rgb(244,5,23)"/><text x="30.3524%" y="415.50"></text></g><g><title>[[vdso]] (12 samples, 0.95%)</title><rect x="30.2600%" y="389" width="0.9456%" height="15" fill="rgb(226,81,46)"/><text x="30.5100%" y="399.50"></text></g><g><title>&lt;reqwest::blocking::response::Response as std::io::Read&gt;::read (383 samples, 30.18%)</title><rect x="1.1820%" y="501" width="30.1812%" height="15" fill="rgb(247,70,30)"/><text x="1.4320%" y="511.50">&lt;reqwest::blocking::response::Response as std::io..</text></g><g><title>reqwest::blocking::wait::timeout (375 samples, 29.55%)</title><rect x="1.8125%" y="485" width="29.5508%" height="15" fill="rgb(212,68,19)"/><text x="2.0625%" y="495.50">reqwest::blocking::wait::timeout</text></g><g><title>tokio::time::instant::Instant::now (2 samples, 0.16%)</title><rect x="31.2057%" y="469" width="0.1576%" height="15" fill="rgb(240,187,13)"/><text x="31.4557%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 1.26%)</title><rect x="32.2301%" y="485" width="1.2608%" height="15" fill="rgb(223,113,26)"/><text x="32.4801%" y="495.50"></text></g><g><title>[unknown] (429 samples, 33.81%)</title><rect x="0.6304%" y="533" width="33.8061%" height="15" fill="rgb(206,192,2)"/><text x="0.8804%" y="543.50">[unknown]</text></g><g><title>std::io::util::copy (426 samples, 33.57%)</title><rect x="0.8668%" y="517" width="33.5697%" height="15" fill="rgb(241,108,4)"/><text x="1.1168%" y="527.50">std::io::util::copy</text></g><g><title>std::io::Write::write_all (39 samples, 3.07%)</title><rect x="31.3633%" y="501" width="3.0733%" height="15" fill="rgb(247,173,49)"/><text x="31.6133%" y="511.50">std..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (12 samples, 0.95%)</title><rect x="33.4909%" y="485" width="0.9456%" height="15" fill="rgb(224,114,35)"/><text x="33.7409%" y="495.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (10 samples, 0.79%)</title><rect x="33.6485%" y="469" width="0.7880%" height="15" fill="rgb(245,159,27)"/><text x="33.8985%" y="479.50"></text></g><g><title>std::sys::unix::fs::File::write (10 samples, 0.79%)</title><rect x="33.6485%" y="453" width="0.7880%" height="15" fill="rgb(245,172,44)"/><text x="33.8985%" y="463.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (10 samples, 0.79%)</title><rect x="33.6485%" y="437" width="0.7880%" height="15" fill="rgb(236,23,11)"/><text x="33.8985%" y="447.50"></text></g><g><title>__libc_write (10 samples, 0.79%)</title><rect x="33.6485%" y="421" width="0.7880%" height="15" fill="rgb(205,117,38)"/><text x="33.8985%" y="431.50"></text></g><g><title>[unknown] (9 samples, 0.71%)</title><rect x="33.7273%" y="405" width="0.7092%" height="15" fill="rgb(237,72,25)"/><text x="33.9773%" y="415.50"></text></g><g><title>[unknown] (8 samples, 0.63%)</title><rect x="33.8061%" y="389" width="0.6304%" height="15" fill="rgb(244,70,9)"/><text x="34.0561%" y="399.50"></text></g><g><title>[unknown] (7 samples, 0.55%)</title><rect x="33.8849%" y="373" width="0.5516%" height="15" fill="rgb(217,125,39)"/><text x="34.1349%" y="383.50"></text></g><g><title>[unknown] (7 samples, 0.55%)</title><rect x="33.8849%" y="357" width="0.5516%" height="15" fill="rgb(235,36,10)"/><text x="34.1349%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.47%)</title><rect x="33.9638%" y="341" width="0.4728%" height="15" fill="rgb(251,123,47)"/><text x="34.2138%" y="351.50"></text></g><g><title>[unknown] (4 samples, 0.32%)</title><rect x="34.1214%" y="325" width="0.3152%" height="15" fill="rgb(221,13,13)"/><text x="34.3714%" y="335.50"></text></g><g><title>__GI___clone (4 samples, 0.32%)</title><rect x="34.4366%" y="533" width="0.3152%" height="15" fill="rgb(238,131,9)"/><text x="34.6866%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="34.9094%" y="501" width="0.1576%" height="15" fill="rgb(211,50,8)"/><text x="35.1594%" y="511.50"></text></g><g><title>asmap-rs (446 samples, 35.15%)</title><rect x="0.0000%" y="549" width="35.1458%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="559.50">asmap-rs</text></g><g><title>_start (5 samples, 0.39%)</title><rect x="34.7518%" y="533" width="0.3940%" height="15" fill="rgb(242,14,37)"/><text x="35.0018%" y="543.50"></text></g><g><title>_dl_start (4 samples, 0.32%)</title><rect x="34.8306%" y="517" width="0.3152%" height="15" fill="rgb(246,228,12)"/><text x="35.0806%" y="527.50"></text></g><g><title>mio::poll::Poll::poll1 (3 samples, 0.24%)</title><rect x="35.3034%" y="517" width="0.2364%" height="15" fill="rgb(213,55,15)"/><text x="35.5534%" y="527.50"></text></g><g><title>mio::sys::unix::epoll::Selector::select (3 samples, 0.24%)</title><rect x="35.3034%" y="501" width="0.2364%" height="15" fill="rgb(209,9,3)"/><text x="35.5534%" y="511.50"></text></g><g><title>epoll_wait (3 samples, 0.24%)</title><rect x="35.3034%" y="485" width="0.2364%" height="15" fill="rgb(230,59,30)"/><text x="35.5534%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="35.3034%" y="469" width="0.2364%" height="15" fill="rgb(209,121,21)"/><text x="35.5534%" y="479.50"></text></g><g><title>[anon] (10 samples, 0.79%)</title><rect x="35.2246%" y="533" width="0.7880%" height="15" fill="rgb(220,109,13)"/><text x="35.4746%" y="543.50"></text></g><g><title>tokio::io::async_read::AsyncRead::poll_read_buf (5 samples, 0.39%)</title><rect x="35.6186%" y="517" width="0.3940%" height="15" fill="rgb(232,18,1)"/><text x="35.8686%" y="527.50"></text></g><g><title>&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.39%)</title><rect x="35.6186%" y="501" width="0.3940%" height="15" fill="rgb(215,41,42)"/><text x="35.8686%" y="511.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.39%)</title><rect x="35.6186%" y="485" width="0.3940%" height="15" fill="rgb(224,123,36)"/><text x="35.8686%" y="495.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (5 samples, 0.39%)</title><rect x="35.6186%" y="469" width="0.3940%" height="15" fill="rgb(240,125,3)"/><text x="35.8686%" y="479.50"></text></g><g><title>&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (5 samples, 0.39%)</title><rect x="35.6186%" y="453" width="0.3940%" height="15" fill="rgb(205,98,50)"/><text x="35.8686%" y="463.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (5 samples, 0.39%)</title><rect x="35.6186%" y="437" width="0.3940%" height="15" fill="rgb(205,185,37)"/><text x="35.8686%" y="447.50"></text></g><g><title>std::sys_common::net::TcpStream::read (5 samples, 0.39%)</title><rect x="35.6186%" y="421" width="0.3940%" height="15" fill="rgb(238,207,15)"/><text x="35.8686%" y="431.50"></text></g><g><title>std::sys::unix::net::Socket::read (5 samples, 0.39%)</title><rect x="35.6186%" y="405" width="0.3940%" height="15" fill="rgb(213,199,42)"/><text x="35.8686%" y="415.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (5 samples, 0.39%)</title><rect x="35.6186%" y="389" width="0.3940%" height="15" fill="rgb(235,201,11)"/><text x="35.8686%" y="399.50"></text></g><g><title>__libc_recv (5 samples, 0.39%)</title><rect x="35.6186%" y="373" width="0.3940%" height="15" fill="rgb(207,46,11)"/><text x="35.8686%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.39%)</title><rect x="35.6186%" y="357" width="0.3940%" height="15" fill="rgb(241,35,35)"/><text x="35.8686%" y="367.50"></text></g><g><title>&lt;std::future::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.16%)</title><rect x="36.7218%" y="421" width="0.1576%" height="15" fill="rgb(243,32,47)"/><text x="36.9718%" y="431.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (2 samples, 0.16%)</title><rect x="36.7218%" y="405" width="0.1576%" height="15" fill="rgb(247,202,23)"/><text x="36.9718%" y="415.50"></text></g><g><title>reqwest::connect::Connector::new_default_tls (2 samples, 0.16%)</title><rect x="36.7218%" y="389" width="0.1576%" height="15" fill="rgb(219,102,11)"/><text x="36.9718%" y="399.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (2 samples, 0.16%)</title><rect x="36.7218%" y="373" width="0.1576%" height="15" fill="rgb(243,110,44)"/><text x="36.9718%" y="383.50"></text></g><g><title>native_tls::imp::TlsConnector::new (2 samples, 0.16%)</title><rect x="36.7218%" y="357" width="0.1576%" height="15" fill="rgb(222,74,54)"/><text x="36.9718%" y="367.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (2 samples, 0.16%)</title><rect x="36.7218%" y="341" width="0.1576%" height="15" fill="rgb(216,99,12)"/><text x="36.9718%" y="351.50"></text></g><g><title>X509_STORE_set_default_paths (2 samples, 0.16%)</title><rect x="36.7218%" y="325" width="0.1576%" height="15" fill="rgb(226,22,26)"/><text x="36.9718%" y="335.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="36.7218%" y="309" width="0.1576%" height="15" fill="rgb(217,163,10)"/><text x="36.9718%" y="319.50"></text></g><g><title>X509_load_cert_crl_file (2 samples, 0.16%)</title><rect x="36.7218%" y="293" width="0.1576%" height="15" fill="rgb(213,25,53)"/><text x="36.9718%" y="303.50"></text></g><g><title>PEM_X509_INFO_read_bio (2 samples, 0.16%)</title><rect x="36.7218%" y="277" width="0.1576%" height="15" fill="rgb(252,105,26)"/><text x="36.9718%" y="287.50"></text></g><g><title>PEM_read_bio_ex (2 samples, 0.16%)</title><rect x="36.7218%" y="261" width="0.1576%" height="15" fill="rgb(220,39,43)"/><text x="36.9718%" y="271.50"></text></g><g><title>&lt;alloc::collections::vec_deque::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.47%)</title><rect x="39.6375%" y="325" width="0.4728%" height="15" fill="rgb(229,68,48)"/><text x="39.8875%" y="335.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::is_server (2 samples, 0.16%)</title><rect x="40.1103%" y="325" width="0.1576%" height="15" fill="rgb(252,8,32)"/><text x="40.3603%" y="335.50"></text></g><g><title>core::ptr::real_drop_in_place (5 samples, 0.39%)</title><rect x="40.2679%" y="325" width="0.3940%" height="15" fill="rgb(223,20,43)"/><text x="40.5179%" y="335.50"></text></g><g><title>hyper::body::body::Sender::poll_ready (4 samples, 0.32%)</title><rect x="40.6619%" y="325" width="0.3152%" height="15" fill="rgb(229,81,49)"/><text x="40.9119%" y="335.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (3 samples, 0.24%)</title><rect x="40.9771%" y="325" width="0.2364%" height="15" fill="rgb(236,28,36)"/><text x="41.2271%" y="335.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::try_keep_alive (3 samples, 0.24%)</title><rect x="41.2136%" y="325" width="0.2364%" height="15" fill="rgb(249,185,26)"/><text x="41.4636%" y="335.50"></text></g><g><title>hyper::proto::h1::conn::State::is_read_closed (3 samples, 0.24%)</title><rect x="41.4500%" y="325" width="0.2364%" height="15" fill="rgb(249,174,33)"/><text x="41.7000%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (65 samples, 5.12%)</title><rect x="36.7218%" y="517" width="5.1221%" height="15" fill="rgb(233,201,37)"/><text x="36.9718%" y="527.50">&lt;alloc..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (65 samples, 5.12%)</title><rect x="36.7218%" y="501" width="5.1221%" height="15" fill="rgb(221,78,26)"/><text x="36.9718%" y="511.50">core::..</text></g><g><title>__rust_maybe_catch_panic (65 samples, 5.12%)</title><rect x="36.7218%" y="485" width="5.1221%" height="15" fill="rgb(250,127,30)"/><text x="36.9718%" y="495.50">__rust..</text></g><g><title>std::panicking::try::do_call (65 samples, 5.12%)</title><rect x="36.7218%" y="469" width="5.1221%" height="15" fill="rgb(230,49,44)"/><text x="36.9718%" y="479.50">std::p..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (65 samples, 5.12%)</title><rect x="36.7218%" y="453" width="5.1221%" height="15" fill="rgb(229,67,23)"/><text x="36.9718%" y="463.50">std::s..</text></g><g><title>tokio::runtime::context::enter (65 samples, 5.12%)</title><rect x="36.7218%" y="437" width="5.1221%" height="15" fill="rgb(249,83,47)"/><text x="36.9718%" y="447.50">tokio:..</text></g><g><title>tokio::task::harness::Harness&lt;T,S&gt;::poll (63 samples, 4.96%)</title><rect x="36.8794%" y="421" width="4.9645%" height="15" fill="rgb(215,43,3)"/><text x="37.1294%" y="431.50">tokio:..</text></g><g><title>__rust_maybe_catch_panic (63 samples, 4.96%)</title><rect x="36.8794%" y="405" width="4.9645%" height="15" fill="rgb(238,154,13)"/><text x="37.1294%" y="415.50">__rust..</text></g><g><title>std::panicking::try::do_call (63 samples, 4.96%)</title><rect x="36.8794%" y="389" width="4.9645%" height="15" fill="rgb(219,56,2)"/><text x="37.1294%" y="399.50">std::p..</text></g><g><title>tokio::task::core::Core&lt;T&gt;::poll (63 samples, 4.96%)</title><rect x="36.8794%" y="373" width="4.9645%" height="15" fill="rgb(233,0,4)"/><text x="37.1294%" y="383.50">tokio:..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (63 samples, 4.96%)</title><rect x="36.8794%" y="357" width="4.9645%" height="15" fill="rgb(235,30,7)"/><text x="37.1294%" y="367.50">&lt;hyper..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (63 samples, 4.96%)</title><rect x="36.8794%" y="341" width="4.9645%" height="15" fill="rgb(250,79,13)"/><text x="37.1294%" y="351.50">hyper:..</text></g><g><title>__GI___pthread_mutex_lock (5 samples, 0.39%)</title><rect x="42.2380%" y="309" width="0.3940%" height="15" fill="rgb(211,146,34)"/><text x="42.4880%" y="319.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (4 samples, 0.32%)</title><rect x="42.7108%" y="309" width="0.3152%" height="15" fill="rgb(228,22,38)"/><text x="42.9608%" y="319.50"></text></g><g><title>futures_channel::mpsc::SenderInner&lt;T&gt;::poll_unparked (17 samples, 1.34%)</title><rect x="41.8440%" y="325" width="1.3396%" height="15" fill="rgb(235,168,5)"/><text x="42.0940%" y="335.50"></text></g><g><title>tokio::task::waker::clone_waker (2 samples, 0.16%)</title><rect x="43.0260%" y="309" width="0.1576%" height="15" fill="rgb(221,155,16)"/><text x="43.2760%" y="319.50"></text></g><g><title>tokio::task::state::State::ref_inc (2 samples, 0.16%)</title><rect x="43.0260%" y="293" width="0.1576%" height="15" fill="rgb(215,215,53)"/><text x="43.2760%" y="303.50"></text></g><g><title>tokio::task::waker::clone_waker (6 samples, 0.47%)</title><rect x="44.3656%" y="309" width="0.4728%" height="15" fill="rgb(223,4,10)"/><text x="44.6156%" y="319.50"></text></g><g><title>tokio::task::state::State::ref_inc (5 samples, 0.39%)</title><rect x="44.4444%" y="293" width="0.3940%" height="15" fill="rgb(234,103,6)"/><text x="44.6944%" y="303.50"></text></g><g><title>hyper::body::body::Sender::poll_ready (42 samples, 3.31%)</title><rect x="41.8440%" y="341" width="3.3097%" height="15" fill="rgb(227,97,0)"/><text x="42.0940%" y="351.50">hyp..</text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (25 samples, 1.97%)</title><rect x="43.1836%" y="325" width="1.9701%" height="15" fill="rgb(234,150,53)"/><text x="43.4336%" y="335.50">f..</text></g><g><title>tokio::task::waker::drop_waker (4 samples, 0.32%)</title><rect x="44.8385%" y="309" width="0.3152%" height="15" fill="rgb(228,201,54)"/><text x="45.0885%" y="319.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.87%)</title><rect x="46.2569%" y="309" width="0.8668%" height="15" fill="rgb(222,22,37)"/><text x="46.5069%" y="319.50"></text></g><g><title>__GI___pthread_mutex_lock (4 samples, 0.32%)</title><rect x="47.1237%" y="309" width="0.3152%" height="15" fill="rgb(237,53,32)"/><text x="47.3737%" y="319.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (4 samples, 0.32%)</title><rect x="47.5177%" y="309" width="0.3152%" height="15" fill="rgb(233,25,53)"/><text x="47.7677%" y="319.50"></text></g><g><title>__pthread_cond_signal (39 samples, 3.07%)</title><rect x="47.8329%" y="293" width="3.0733%" height="15" fill="rgb(210,40,34)"/><text x="48.0829%" y="303.50">__p..</text></g><g><title>[unknown] (27 samples, 2.13%)</title><rect x="48.7786%" y="277" width="2.1277%" height="15" fill="rgb(241,220,44)"/><text x="49.0286%" y="287.50">[..</text></g><g><title>[unknown] (26 samples, 2.05%)</title><rect x="48.8574%" y="261" width="2.0489%" height="15" fill="rgb(235,28,35)"/><text x="49.1074%" y="271.50">[..</text></g><g><title>[unknown] (25 samples, 1.97%)</title><rect x="48.9362%" y="245" width="1.9701%" height="15" fill="rgb(210,56,17)"/><text x="49.1862%" y="255.50">[..</text></g><g><title>[unknown] (20 samples, 1.58%)</title><rect x="49.3302%" y="229" width="1.5760%" height="15" fill="rgb(224,130,29)"/><text x="49.5802%" y="239.50"></text></g><g><title>[unknown] (16 samples, 1.26%)</title><rect x="49.6454%" y="213" width="1.2608%" height="15" fill="rgb(235,212,8)"/><text x="49.8954%" y="223.50"></text></g><g><title>[unknown] (8 samples, 0.63%)</title><rect x="50.2758%" y="197" width="0.6304%" height="15" fill="rgb(223,33,50)"/><text x="50.5258%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="50.7486%" y="181" width="0.1576%" height="15" fill="rgb(219,149,13)"/><text x="50.9986%" y="191.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (79 samples, 6.23%)</title><rect x="45.1537%" y="341" width="6.2254%" height="15" fill="rgb(250,156,29)"/><text x="45.4037%" y="351.50">hyper::b..</text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (79 samples, 6.23%)</title><rect x="45.1537%" y="325" width="6.2254%" height="15" fill="rgb(216,193,19)"/><text x="45.4037%" y="335.50">futures_..</text></g><g><title>futures_task::waker::wake_arc_raw (45 samples, 3.55%)</title><rect x="47.8329%" y="309" width="3.5461%" height="15" fill="rgb(216,135,14)"/><text x="48.0829%" y="319.50">futu..</text></g><g><title>std::thread::Thread::unpark (6 samples, 0.47%)</title><rect x="50.9062%" y="293" width="0.4728%" height="15" fill="rgb(241,47,5)"/><text x="51.1562%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (3 samples, 0.24%)</title><rect x="51.1426%" y="277" width="0.2364%" height="15" fill="rgb(233,42,35)"/><text x="51.3926%" y="287.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (3 samples, 0.24%)</title><rect x="51.1426%" y="261" width="0.2364%" height="15" fill="rgb(231,13,6)"/><text x="51.3926%" y="271.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (3 samples, 0.24%)</title><rect x="51.1426%" y="245" width="0.2364%" height="15" fill="rgb(207,181,40)"/><text x="51.3926%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (3 samples, 0.24%)</title><rect x="51.1426%" y="229" width="0.2364%" height="15" fill="rgb(254,173,49)"/><text x="51.3926%" y="239.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (2 samples, 0.16%)</title><rect x="51.3790%" y="341" width="0.1576%" height="15" fill="rgb(221,1,38)"/><text x="51.6290%" y="351.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::try_keep_alive (2 samples, 0.16%)</title><rect x="51.5366%" y="341" width="0.1576%" height="15" fill="rgb(206,124,46)"/><text x="51.7866%" y="351.50"></text></g><g><title>&lt;alloc::collections::vec_deque::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="51.7730%" y="325" width="0.1576%" height="15" fill="rgb(249,21,11)"/><text x="52.0230%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (133 samples, 10.48%)</title><rect x="41.8440%" y="517" width="10.4807%" height="15" fill="rgb(222,201,40)"/><text x="42.0940%" y="527.50">core::ops::func..</text></g><g><title>__rust_maybe_catch_panic (133 samples, 10.48%)</title><rect x="41.8440%" y="501" width="10.4807%" height="15" fill="rgb(235,61,29)"/><text x="42.0940%" y="511.50">__rust_maybe_ca..</text></g><g><title>std::panicking::try::do_call (133 samples, 10.48%)</title><rect x="41.8440%" y="485" width="10.4807%" height="15" fill="rgb(219,207,3)"/><text x="42.0940%" y="495.50">std::panicking:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (133 samples, 10.48%)</title><rect x="41.8440%" y="469" width="10.4807%" height="15" fill="rgb(222,56,46)"/><text x="42.0940%" y="479.50">std::sys_common..</text></g><g><title>tokio::runtime::context::enter (133 samples, 10.48%)</title><rect x="41.8440%" y="453" width="10.4807%" height="15" fill="rgb(239,76,54)"/><text x="42.0940%" y="463.50">tokio::runtime:..</text></g><g><title>tokio::task::harness::Harness&lt;T,S&gt;::poll (133 samples, 10.48%)</title><rect x="41.8440%" y="437" width="10.4807%" height="15" fill="rgb(231,124,27)"/><text x="42.0940%" y="447.50">tokio::task::ha..</text></g><g><title>__rust_maybe_catch_panic (133 samples, 10.48%)</title><rect x="41.8440%" y="421" width="10.4807%" height="15" fill="rgb(249,195,6)"/><text x="42.0940%" y="431.50">__rust_maybe_ca..</text></g><g><title>std::panicking::try::do_call (133 samples, 10.48%)</title><rect x="41.8440%" y="405" width="10.4807%" height="15" fill="rgb(237,174,47)"/><text x="42.0940%" y="415.50">std::panicking:..</text></g><g><title>tokio::task::core::Core&lt;T&gt;::poll (133 samples, 10.48%)</title><rect x="41.8440%" y="389" width="10.4807%" height="15" fill="rgb(206,201,31)"/><text x="42.0940%" y="399.50">tokio::task::co..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (133 samples, 10.48%)</title><rect x="41.8440%" y="373" width="10.4807%" height="15" fill="rgb(231,57,52)"/><text x="42.0940%" y="383.50">&lt;hyper::client:..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (133 samples, 10.48%)</title><rect x="41.8440%" y="357" width="10.4807%" height="15" fill="rgb(248,177,22)"/><text x="42.0940%" y="367.50">hyper::proto::h..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (8 samples, 0.63%)</title><rect x="51.6942%" y="341" width="0.6304%" height="15" fill="rgb(215,211,37)"/><text x="51.9442%" y="351.50"></text></g><g><title>&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_flush (5 samples, 0.39%)</title><rect x="51.9307%" y="325" width="0.3940%" height="15" fill="rgb(241,128,51)"/><text x="52.1807%" y="335.50"></text></g><g><title>epoll_wait (3 samples, 0.24%)</title><rect x="52.3247%" y="517" width="0.2364%" height="15" fill="rgb(227,165,31)"/><text x="52.5747%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="52.3247%" y="501" width="0.2364%" height="15" fill="rgb(228,167,24)"/><text x="52.5747%" y="511.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (3 samples, 0.24%)</title><rect x="52.5611%" y="517" width="0.2364%" height="15" fill="rgb(228,143,12)"/><text x="52.8111%" y="527.50"></text></g><g><title>futures_task::waker::wake_arc_raw (3 samples, 0.24%)</title><rect x="52.5611%" y="501" width="0.2364%" height="15" fill="rgb(249,149,8)"/><text x="52.8111%" y="511.50"></text></g><g><title>__pthread_cond_signal (3 samples, 0.24%)</title><rect x="52.5611%" y="485" width="0.2364%" height="15" fill="rgb(243,35,44)"/><text x="52.8111%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.24%)</title><rect x="52.5611%" y="469" width="0.2364%" height="15" fill="rgb(246,89,9)"/><text x="52.8111%" y="479.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (10 samples, 0.79%)</title><rect x="52.8763%" y="373" width="0.7880%" height="15" fill="rgb(233,213,13)"/><text x="53.1263%" y="383.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (10 samples, 0.79%)</title><rect x="52.8763%" y="357" width="0.7880%" height="15" fill="rgb(233,141,41)"/><text x="53.1263%" y="367.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.79%)</title><rect x="52.8763%" y="341" width="0.7880%" height="15" fill="rgb(239,167,4)"/><text x="53.1263%" y="351.50"></text></g><g><title>_int_malloc (10 samples, 0.79%)</title><rect x="52.8763%" y="325" width="0.7880%" height="15" fill="rgb(209,217,16)"/><text x="53.1263%" y="335.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (9 samples, 0.71%)</title><rect x="54.0583%" y="341" width="0.7092%" height="15" fill="rgb(219,88,35)"/><text x="54.3083%" y="351.50"></text></g><g><title>std::panicking::try::do_call (27 samples, 2.13%)</title><rect x="52.7975%" y="517" width="2.1277%" height="15" fill="rgb(220,193,23)"/><text x="53.0475%" y="527.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (27 samples, 2.13%)</title><rect x="52.7975%" y="501" width="2.1277%" height="15" fill="rgb(230,90,52)"/><text x="53.0475%" y="511.50">s..</text></g><g><title>tokio::runtime::context::enter (27 samples, 2.13%)</title><rect x="52.7975%" y="485" width="2.1277%" height="15" fill="rgb(252,106,19)"/><text x="53.0475%" y="495.50">t..</text></g><g><title>tokio::task::harness::Harness&lt;T,S&gt;::poll (26 samples, 2.05%)</title><rect x="52.8763%" y="469" width="2.0489%" height="15" fill="rgb(206,74,20)"/><text x="53.1263%" y="479.50">t..</text></g><g><title>__rust_maybe_catch_panic (26 samples, 2.05%)</title><rect x="52.8763%" y="453" width="2.0489%" height="15" fill="rgb(230,138,44)"/><text x="53.1263%" y="463.50">_..</text></g><g><title>std::panicking::try::do_call (26 samples, 2.05%)</title><rect x="52.8763%" y="437" width="2.0489%" height="15" fill="rgb(235,182,43)"/><text x="53.1263%" y="447.50">s..</text></g><g><title>tokio::task::core::Core&lt;T&gt;::poll (26 samples, 2.05%)</title><rect x="52.8763%" y="421" width="2.0489%" height="15" fill="rgb(242,16,51)"/><text x="53.1263%" y="431.50">t..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (26 samples, 2.05%)</title><rect x="52.8763%" y="405" width="2.0489%" height="15" fill="rgb(248,9,4)"/><text x="53.1263%" y="415.50">&lt;..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (26 samples, 2.05%)</title><rect x="52.8763%" y="389" width="2.0489%" height="15" fill="rgb(210,31,22)"/><text x="53.1263%" y="399.50">h..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (16 samples, 1.26%)</title><rect x="53.6643%" y="373" width="1.2608%" height="15" fill="rgb(239,54,39)"/><text x="53.9143%" y="383.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (16 samples, 1.26%)</title><rect x="53.6643%" y="357" width="1.2608%" height="15" fill="rgb(230,99,41)"/><text x="53.9143%" y="367.50"></text></g><g><title>core::ptr::real_drop_in_place (2 samples, 0.16%)</title><rect x="54.7675%" y="341" width="0.1576%" height="15" fill="rgb(253,106,12)"/><text x="55.0175%" y="351.50"></text></g><g><title>ASN1_item_ex_d2i (3 samples, 0.24%)</title><rect x="54.9251%" y="165" width="0.2364%" height="15" fill="rgb(213,46,41)"/><text x="55.1751%" y="175.50"></text></g><g><title>[libcrypto.so.1.1] (3 samples, 0.24%)</title><rect x="54.9251%" y="149" width="0.2364%" height="15" fill="rgb(215,133,35)"/><text x="55.1751%" y="159.50"></text></g><g><title>[libcrypto.so.1.1] (3 samples, 0.24%)</title><rect x="54.9251%" y="133" width="0.2364%" height="15" fill="rgb(213,28,5)"/><text x="55.1751%" y="143.50"></text></g><g><title>[libcrypto.so.1.1] (3 samples, 0.24%)</title><rect x="54.9251%" y="117" width="0.2364%" height="15" fill="rgb(215,77,49)"/><text x="55.1751%" y="127.50"></text></g><g><title>[libcrypto.so.1.1] (3 samples, 0.24%)</title><rect x="54.9251%" y="101" width="0.2364%" height="15" fill="rgb(248,100,22)"/><text x="55.1751%" y="111.50"></text></g><g><title>[libcrypto.so.1.1] (3 samples, 0.24%)</title><rect x="54.9251%" y="85" width="0.2364%" height="15" fill="rgb(208,67,9)"/><text x="55.1751%" y="95.50"></text></g><g><title>[libcrypto.so.1.1] (3 samples, 0.24%)</title><rect x="54.9251%" y="69" width="0.2364%" height="15" fill="rgb(219,133,21)"/><text x="55.1751%" y="79.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="55.0039%" y="53" width="0.1576%" height="15" fill="rgb(246,46,29)"/><text x="55.2539%" y="63.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="55.0039%" y="37" width="0.1576%" height="15" fill="rgb(246,185,52)"/><text x="55.2539%" y="47.50"></text></g><g><title>ASN1_item_new (2 samples, 0.16%)</title><rect x="55.2403%" y="149" width="0.1576%" height="15" fill="rgb(252,136,11)"/><text x="55.4903%" y="159.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="55.2403%" y="133" width="0.1576%" height="15" fill="rgb(219,138,53)"/><text x="55.4903%" y="143.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="55.2403%" y="117" width="0.1576%" height="15" fill="rgb(211,51,23)"/><text x="55.4903%" y="127.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="55.2403%" y="101" width="0.1576%" height="15" fill="rgb(247,221,28)"/><text x="55.4903%" y="111.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="55.2403%" y="85" width="0.1576%" height="15" fill="rgb(251,222,45)"/><text x="55.4903%" y="95.50"></text></g><g><title>ASN1_STRING_type_new (2 samples, 0.16%)</title><rect x="55.2403%" y="69" width="0.1576%" height="15" fill="rgb(217,162,53)"/><text x="55.4903%" y="79.50"></text></g><g><title>CRYPTO_zalloc (2 samples, 0.16%)</title><rect x="55.2403%" y="53" width="0.1576%" height="15" fill="rgb(229,93,14)"/><text x="55.4903%" y="63.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.16%)</title><rect x="55.2403%" y="37" width="0.1576%" height="15" fill="rgb(209,67,49)"/><text x="55.4903%" y="47.50"></text></g><g><title>OPENSSL_sk_pop_free (2 samples, 0.16%)</title><rect x="55.4768%" y="149" width="0.1576%" height="15" fill="rgb(213,87,29)"/><text x="55.7268%" y="159.50"></text></g><g><title>&lt;std::future::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 1.02%)</title><rect x="54.9251%" y="485" width="1.0244%" height="15" fill="rgb(205,151,52)"/><text x="55.1751%" y="495.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (13 samples, 1.02%)</title><rect x="54.9251%" y="469" width="1.0244%" height="15" fill="rgb(253,215,39)"/><text x="55.1751%" y="479.50"></text></g><g><title>reqwest::connect::Connector::new_default_tls (13 samples, 1.02%)</title><rect x="54.9251%" y="453" width="1.0244%" height="15" fill="rgb(221,220,41)"/><text x="55.1751%" y="463.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (13 samples, 1.02%)</title><rect x="54.9251%" y="437" width="1.0244%" height="15" fill="rgb(218,133,21)"/><text x="55.1751%" y="447.50"></text></g><g><title>native_tls::imp::TlsConnector::new (13 samples, 1.02%)</title><rect x="54.9251%" y="421" width="1.0244%" height="15" fill="rgb(221,193,43)"/><text x="55.1751%" y="431.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (13 samples, 1.02%)</title><rect x="54.9251%" y="405" width="1.0244%" height="15" fill="rgb(240,128,52)"/><text x="55.1751%" y="415.50"></text></g><g><title>X509_STORE_set_default_paths (13 samples, 1.02%)</title><rect x="54.9251%" y="389" width="1.0244%" height="15" fill="rgb(253,114,12)"/><text x="55.1751%" y="399.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.02%)</title><rect x="54.9251%" y="373" width="1.0244%" height="15" fill="rgb(215,223,47)"/><text x="55.1751%" y="383.50"></text></g><g><title>X509_load_cert_crl_file (13 samples, 1.02%)</title><rect x="54.9251%" y="357" width="1.0244%" height="15" fill="rgb(248,225,23)"/><text x="55.1751%" y="367.50"></text></g><g><title>PEM_X509_INFO_read_bio (13 samples, 1.02%)</title><rect x="54.9251%" y="341" width="1.0244%" height="15" fill="rgb(250,108,0)"/><text x="55.1751%" y="351.50"></text></g><g><title>ASN1_item_d2i (13 samples, 1.02%)</title><rect x="54.9251%" y="325" width="1.0244%" height="15" fill="rgb(228,208,7)"/><text x="55.1751%" y="335.50"></text></g><g><title>ASN1_item_ex_d2i (13 samples, 1.02%)</title><rect x="54.9251%" y="309" width="1.0244%" height="15" fill="rgb(244,45,10)"/><text x="55.1751%" y="319.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.02%)</title><rect x="54.9251%" y="293" width="1.0244%" height="15" fill="rgb(207,125,25)"/><text x="55.1751%" y="303.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.02%)</title><rect x="54.9251%" y="277" width="1.0244%" height="15" fill="rgb(210,195,18)"/><text x="55.1751%" y="287.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.02%)</title><rect x="54.9251%" y="261" width="1.0244%" height="15" fill="rgb(249,80,12)"/><text x="55.1751%" y="271.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.02%)</title><rect x="54.9251%" y="245" width="1.0244%" height="15" fill="rgb(221,65,9)"/><text x="55.1751%" y="255.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.02%)</title><rect x="54.9251%" y="229" width="1.0244%" height="15" fill="rgb(235,49,36)"/><text x="55.1751%" y="239.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.02%)</title><rect x="54.9251%" y="213" width="1.0244%" height="15" fill="rgb(225,32,20)"/><text x="55.1751%" y="223.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.02%)</title><rect x="54.9251%" y="197" width="1.0244%" height="15" fill="rgb(215,141,46)"/><text x="55.1751%" y="207.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.02%)</title><rect x="54.9251%" y="181" width="1.0244%" height="15" fill="rgb(250,160,47)"/><text x="55.1751%" y="191.50"></text></g><g><title>[libcrypto.so.1.1] (10 samples, 0.79%)</title><rect x="55.1615%" y="165" width="0.7880%" height="15" fill="rgb(216,222,40)"/><text x="55.4115%" y="175.50"></text></g><g><title>[libcrypto.so.1.1] (4 samples, 0.32%)</title><rect x="55.6344%" y="149" width="0.3152%" height="15" fill="rgb(234,217,39)"/><text x="55.8844%" y="159.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="55.7920%" y="133" width="0.1576%" height="15" fill="rgb(207,178,40)"/><text x="56.0420%" y="143.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (10 samples, 0.79%)</title><rect x="55.9496%" y="341" width="0.7880%" height="15" fill="rgb(221,136,13)"/><text x="56.1996%" y="351.50"></text></g><g><title>[unknown] (33 samples, 2.60%)</title><rect x="57.9984%" y="165" width="2.6005%" height="15" fill="rgb(249,199,10)"/><text x="58.2484%" y="175.50">[u..</text></g><g><title>[unknown] (30 samples, 2.36%)</title><rect x="58.2348%" y="149" width="2.3641%" height="15" fill="rgb(249,222,13)"/><text x="58.4848%" y="159.50">[u..</text></g><g><title>[unknown] (27 samples, 2.13%)</title><rect x="58.4712%" y="133" width="2.1277%" height="15" fill="rgb(244,185,38)"/><text x="58.7212%" y="143.50">[..</text></g><g><title>[unknown] (20 samples, 1.58%)</title><rect x="59.0229%" y="117" width="1.5760%" height="15" fill="rgb(236,202,9)"/><text x="59.2729%" y="127.50"></text></g><g><title>[unknown] (8 samples, 0.63%)</title><rect x="59.9685%" y="101" width="0.6304%" height="15" fill="rgb(250,229,37)"/><text x="60.2185%" y="111.50"></text></g><g><title>[unknown] (7 samples, 0.55%)</title><rect x="60.0473%" y="85" width="0.5516%" height="15" fill="rgb(206,174,23)"/><text x="60.2973%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.39%)</title><rect x="60.2049%" y="69" width="0.3940%" height="15" fill="rgb(211,33,43)"/><text x="60.4549%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="60.4413%" y="53" width="0.1576%" height="15" fill="rgb(245,58,50)"/><text x="60.6913%" y="63.50"></text></g><g><title>&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (41 samples, 3.23%)</title><rect x="57.5256%" y="261" width="3.2309%" height="15" fill="rgb(244,68,36)"/><text x="57.7756%" y="271.50">&lt;&amp;m..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (38 samples, 2.99%)</title><rect x="57.7620%" y="245" width="2.9945%" height="15" fill="rgb(232,229,15)"/><text x="58.0120%" y="255.50">&lt;&amp;s..</text></g><g><title>std::sys_common::net::TcpStream::read (36 samples, 2.84%)</title><rect x="57.9196%" y="229" width="2.8369%" height="15" fill="rgb(254,30,23)"/><text x="58.1696%" y="239.50">st..</text></g><g><title>std::sys::unix::net::Socket::read (36 samples, 2.84%)</title><rect x="57.9196%" y="213" width="2.8369%" height="15" fill="rgb(235,160,14)"/><text x="58.1696%" y="223.50">st..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (36 samples, 2.84%)</title><rect x="57.9196%" y="197" width="2.8369%" height="15" fill="rgb(212,155,44)"/><text x="58.1696%" y="207.50">st..</text></g><g><title>__libc_recv (36 samples, 2.84%)</title><rect x="57.9196%" y="181" width="2.8369%" height="15" fill="rgb(226,2,50)"/><text x="58.1696%" y="191.50">__..</text></g><g><title>__pthread_enable_asynccancel (2 samples, 0.16%)</title><rect x="60.5989%" y="165" width="0.1576%" height="15" fill="rgb(234,177,6)"/><text x="60.8489%" y="175.50"></text></g><g><title>tokio::io::driver::Inner::register (5 samples, 0.39%)</title><rect x="61.3081%" y="213" width="0.3940%" height="15" fill="rgb(217,24,9)"/><text x="61.5581%" y="223.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register (4 samples, 0.32%)</title><rect x="61.3869%" y="197" width="0.3152%" height="15" fill="rgb(220,13,46)"/><text x="61.6369%" y="207.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::clear_read_ready (24 samples, 1.89%)</title><rect x="60.7565%" y="261" width="1.8913%" height="15" fill="rgb(239,221,27)"/><text x="61.0065%" y="271.50">t..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (23 samples, 1.81%)</title><rect x="60.8353%" y="245" width="1.8125%" height="15" fill="rgb(222,198,25)"/><text x="61.0853%" y="255.50">t..</text></g><g><title>tokio::io::registration::Registration::poll_ready (22 samples, 1.73%)</title><rect x="60.9141%" y="229" width="1.7336%" height="15" fill="rgb(211,99,13)"/><text x="61.1641%" y="239.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (12 samples, 0.95%)</title><rect x="61.7021%" y="213" width="0.9456%" height="15" fill="rgb(232,111,31)"/><text x="61.9521%" y="223.50"></text></g><g><title>tokio::task::waker::clone_waker (2 samples, 0.16%)</title><rect x="62.4901%" y="197" width="0.1576%" height="15" fill="rgb(245,82,37)"/><text x="62.7401%" y="207.50"></text></g><g><title>tokio::task::state::State::ref_inc (2 samples, 0.16%)</title><rect x="62.4901%" y="181" width="0.1576%" height="15" fill="rgb(227,149,46)"/><text x="62.7401%" y="191.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.16%)</title><rect x="63.0418%" y="245" width="0.1576%" height="15" fill="rgb(218,36,50)"/><text x="63.2918%" y="255.50"></text></g><g><title>mio::event_imp::Ready::as_usize (3 samples, 0.24%)</title><rect x="64.3814%" y="229" width="0.2364%" height="15" fill="rgb(226,80,48)"/><text x="64.6314%" y="239.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register (3 samples, 0.24%)</title><rect x="64.6966%" y="213" width="0.2364%" height="15" fill="rgb(238,224,15)"/><text x="64.9466%" y="223.50"></text></g><g><title>tokio::io::driver::Inner::register (6 samples, 0.47%)</title><rect x="64.6966%" y="229" width="0.4728%" height="15" fill="rgb(241,136,10)"/><text x="64.9466%" y="239.50"></text></g><g><title>tokio::task::waker::wake_by_val (3 samples, 0.24%)</title><rect x="64.9330%" y="213" width="0.2364%" height="15" fill="rgb(208,32,45)"/><text x="65.1830%" y="223.50"></text></g><g><title>tokio::task::state::State::transition_to_notified (2 samples, 0.16%)</title><rect x="65.0118%" y="197" width="0.1576%" height="15" fill="rgb(207,135,9)"/><text x="65.2618%" y="207.50"></text></g><g><title>&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (103 samples, 8.12%)</title><rect x="57.1316%" y="309" width="8.1166%" height="15" fill="rgb(206,86,44)"/><text x="57.3816%" y="319.50">&lt;hyper_tls:..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (102 samples, 8.04%)</title><rect x="57.2104%" y="293" width="8.0378%" height="15" fill="rgb(245,177,15)"/><text x="57.4604%" y="303.50">&lt;tokio::net..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (99 samples, 7.80%)</title><rect x="57.4468%" y="277" width="7.8014%" height="15" fill="rgb(206,64,50)"/><text x="57.6968%" y="287.50">tokio::net:..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (33 samples, 2.60%)</title><rect x="62.6478%" y="261" width="2.6005%" height="15" fill="rgb(234,36,40)"/><text x="62.8978%" y="271.50">to..</text></g><g><title>tokio::io::registration::Registration::poll_ready (25 samples, 1.97%)</title><rect x="63.2782%" y="245" width="1.9701%" height="15" fill="rgb(213,64,8)"/><text x="63.5282%" y="255.50">t..</text></g><g><title>[unknown] (373 samples, 29.39%)</title><rect x="36.0126%" y="533" width="29.3932%" height="15" fill="rgb(210,75,36)"/><text x="36.2626%" y="543.50">[unknown]</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (133 samples, 10.48%)</title><rect x="54.9251%" y="517" width="10.4807%" height="15" fill="rgb(229,88,21)"/><text x="55.1751%" y="527.50">std::sys_common..</text></g><g><title>tokio::runtime::context::enter (133 samples, 10.48%)</title><rect x="54.9251%" y="501" width="10.4807%" height="15" fill="rgb(252,204,47)"/><text x="55.1751%" y="511.50">tokio::runtime:..</text></g><g><title>tokio::task::harness::Harness&lt;T,S&gt;::poll (120 samples, 9.46%)</title><rect x="55.9496%" y="485" width="9.4563%" height="15" fill="rgb(208,77,27)"/><text x="56.1996%" y="495.50">tokio::task::h..</text></g><g><title>__rust_maybe_catch_panic (120 samples, 9.46%)</title><rect x="55.9496%" y="469" width="9.4563%" height="15" fill="rgb(221,76,26)"/><text x="56.1996%" y="479.50">__rust_maybe_c..</text></g><g><title>std::panicking::try::do_call (120 samples, 9.46%)</title><rect x="55.9496%" y="453" width="9.4563%" height="15" fill="rgb(225,139,18)"/><text x="56.1996%" y="463.50">std::panicking..</text></g><g><title>tokio::task::core::Core&lt;T&gt;::poll (120 samples, 9.46%)</title><rect x="55.9496%" y="437" width="9.4563%" height="15" fill="rgb(230,137,11)"/><text x="56.1996%" y="447.50">tokio::task::c..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (120 samples, 9.46%)</title><rect x="55.9496%" y="421" width="9.4563%" height="15" fill="rgb(212,28,1)"/><text x="56.1996%" y="431.50">&lt;hyper::client..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (120 samples, 9.46%)</title><rect x="55.9496%" y="405" width="9.4563%" height="15" fill="rgb(248,164,17)"/><text x="56.1996%" y="415.50">hyper::proto::..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (120 samples, 9.46%)</title><rect x="55.9496%" y="389" width="9.4563%" height="15" fill="rgb(222,171,42)"/><text x="56.1996%" y="399.50">hyper::proto::..</text></g><g><title>hyper::proto::h1::decode::Decoder::decode (120 samples, 9.46%)</title><rect x="55.9496%" y="373" width="9.4563%" height="15" fill="rgb(243,84,45)"/><text x="56.1996%" y="383.50">hyper::proto::..</text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (120 samples, 9.46%)</title><rect x="55.9496%" y="357" width="9.4563%" height="15" fill="rgb(252,49,23)"/><text x="56.1996%" y="367.50">&lt;hyper::proto:..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (110 samples, 8.67%)</title><rect x="56.7376%" y="341" width="8.6682%" height="15" fill="rgb(215,19,7)"/><text x="56.9876%" y="351.50">hyper::proto..</text></g><g><title>tokio::io::async_read::AsyncRead::poll_read_buf (109 samples, 8.59%)</title><rect x="56.8164%" y="325" width="8.5894%" height="15" fill="rgb(238,81,41)"/><text x="57.0664%" y="335.50">tokio::io::a..</text></g><g><title>&lt;std::future::SetOnDrop as core::ops::drop::Drop&gt;::drop (9 samples, 0.71%)</title><rect x="68.0063%" y="341" width="0.7092%" height="15" fill="rgb(210,199,37)"/><text x="68.2563%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="68.7155%" y="341" width="0.1576%" height="15" fill="rgb(244,192,49)"/><text x="68.9655%" y="351.50"></text></g><g><title>core::ptr::real_drop_in_place (2 samples, 0.16%)</title><rect x="68.7155%" y="325" width="0.1576%" height="15" fill="rgb(226,211,11)"/><text x="68.9655%" y="335.50"></text></g><g><title>SSL_CTX_free (2 samples, 0.16%)</title><rect x="68.7155%" y="309" width="0.1576%" height="15" fill="rgb(236,162,54)"/><text x="68.9655%" y="319.50"></text></g><g><title>X509_STORE_free (2 samples, 0.16%)</title><rect x="68.7155%" y="293" width="0.1576%" height="15" fill="rgb(220,229,9)"/><text x="68.9655%" y="303.50"></text></g><g><title>OPENSSL_sk_pop_free (2 samples, 0.16%)</title><rect x="68.7155%" y="277" width="0.1576%" height="15" fill="rgb(250,87,22)"/><text x="68.9655%" y="287.50"></text></g><g><title>X509_OBJECT_free (2 samples, 0.16%)</title><rect x="68.7155%" y="261" width="0.1576%" height="15" fill="rgb(239,43,17)"/><text x="68.9655%" y="271.50"></text></g><g><title>ASN1_item_free (2 samples, 0.16%)</title><rect x="68.7155%" y="245" width="0.1576%" height="15" fill="rgb(231,177,25)"/><text x="68.9655%" y="255.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="68.7155%" y="229" width="0.1576%" height="15" fill="rgb(219,179,1)"/><text x="68.9655%" y="239.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="68.7155%" y="213" width="0.1576%" height="15" fill="rgb(238,219,53)"/><text x="68.9655%" y="223.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="68.7155%" y="197" width="0.1576%" height="15" fill="rgb(232,167,36)"/><text x="68.9655%" y="207.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="68.7155%" y="181" width="0.1576%" height="15" fill="rgb(244,19,51)"/><text x="68.9655%" y="191.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="68.7155%" y="165" width="0.1576%" height="15" fill="rgb(224,6,22)"/><text x="68.9655%" y="175.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.16%)</title><rect x="68.7155%" y="149" width="0.1576%" height="15" fill="rgb(224,145,5)"/><text x="68.9655%" y="159.50"></text></g><g><title>std::future::TLS_CX::__getit (3 samples, 0.24%)</title><rect x="68.8731%" y="341" width="0.2364%" height="15" fill="rgb(234,130,49)"/><text x="69.1231%" y="351.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.16%)</title><rect x="68.9519%" y="325" width="0.1576%" height="15" fill="rgb(254,6,2)"/><text x="69.2019%" y="335.50"></text></g><g><title>std::future::set_task_context (6 samples, 0.47%)</title><rect x="69.1095%" y="341" width="0.4728%" height="15" fill="rgb(208,96,46)"/><text x="69.3595%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned (5 samples, 0.39%)</title><rect x="70.7644%" y="309" width="0.3940%" height="15" fill="rgb(239,3,39)"/><text x="71.0144%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.87%)</title><rect x="71.1584%" y="309" width="0.8668%" height="15" fill="rgb(233,210,1)"/><text x="71.4084%" y="319.50"></text></g><g><title>tokio::sync::mpsc::block::is_ready (3 samples, 0.24%)</title><rect x="72.0252%" y="309" width="0.2364%" height="15" fill="rgb(244,137,37)"/><text x="72.2752%" y="319.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (34 samples, 2.68%)</title><rect x="69.7400%" y="325" width="2.6793%" height="15" fill="rgb(240,136,2)"/><text x="69.9900%" y="335.50">to..</text></g><g><title>tokio::sync::mpsc::block::is_tx_closed (2 samples, 0.16%)</title><rect x="72.2616%" y="309" width="0.1576%" height="15" fill="rgb(239,18,37)"/><text x="72.5116%" y="319.50"></text></g><g><title>core::task::wake::RawWaker::new (2 samples, 0.16%)</title><rect x="72.7344%" y="309" width="0.1576%" height="15" fill="rgb(218,185,22)"/><text x="72.9844%" y="319.50"></text></g><g><title>tokio::runtime::basic_scheduler::sched_clone_waker (6 samples, 0.47%)</title><rect x="72.8920%" y="309" width="0.4728%" height="15" fill="rgb(225,218,4)"/><text x="73.1420%" y="319.50"></text></g><g><title>&lt;std::future::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (80 samples, 6.30%)</title><rect x="67.6123%" y="357" width="6.3042%" height="15" fill="rgb(230,182,32)"/><text x="67.8623%" y="367.50">&lt;std::fu..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (55 samples, 4.33%)</title><rect x="69.5823%" y="341" width="4.3341%" height="15" fill="rgb(242,56,43)"/><text x="69.8323%" y="351.50">tokio..</text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (19 samples, 1.50%)</title><rect x="72.4192%" y="325" width="1.4972%" height="15" fill="rgb(233,99,24)"/><text x="72.6692%" y="335.50"></text></g><g><title>tokio::runtime::basic_scheduler::sched_drop (7 samples, 0.55%)</title><rect x="73.3649%" y="309" width="0.5516%" height="15" fill="rgb(234,209,42)"/><text x="73.6149%" y="319.50"></text></g><g><title>&lt;&amp;mio::poll::Events as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.24%)</title><rect x="76.0441%" y="309" width="0.2364%" height="15" fill="rgb(227,7,12)"/><text x="76.2941%" y="319.50"></text></g><g><title>mio::event_imp::Event::token (2 samples, 0.16%)</title><rect x="76.4381%" y="309" width="0.1576%" height="15" fill="rgb(245,203,43)"/><text x="76.6881%" y="319.50"></text></g><g><title>mio::sys::unix::awakener::pipe::Awakener::cleanup (28 samples, 2.21%)</title><rect x="77.7778%" y="277" width="2.2065%" height="15" fill="rgb(238,205,33)"/><text x="78.0278%" y="287.50">m..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (27 samples, 2.13%)</title><rect x="77.8566%" y="261" width="2.1277%" height="15" fill="rgb(231,56,7)"/><text x="78.1066%" y="271.50">&lt;..</text></g><g><title>std::sys::unix::fs::File::read (27 samples, 2.13%)</title><rect x="77.8566%" y="245" width="2.1277%" height="15" fill="rgb(244,186,29)"/><text x="78.1066%" y="255.50">s..</text></g><g><title>std::sys::unix::fd::FileDesc::read (27 samples, 2.13%)</title><rect x="77.8566%" y="229" width="2.1277%" height="15" fill="rgb(234,111,31)"/><text x="78.1066%" y="239.50">s..</text></g><g><title>__libc_read (26 samples, 2.05%)</title><rect x="77.9354%" y="213" width="2.0489%" height="15" fill="rgb(241,149,10)"/><text x="78.1854%" y="223.50">_..</text></g><g><title>[unknown] (26 samples, 2.05%)</title><rect x="77.9354%" y="197" width="2.0489%" height="15" fill="rgb(249,206,44)"/><text x="78.1854%" y="207.50">[..</text></g><g><title>[unknown] (23 samples, 1.81%)</title><rect x="78.1718%" y="181" width="1.8125%" height="15" fill="rgb(251,153,30)"/><text x="78.4218%" y="191.50">[..</text></g><g><title>[unknown] (22 samples, 1.73%)</title><rect x="78.2506%" y="165" width="1.7336%" height="15" fill="rgb(239,152,38)"/><text x="78.5006%" y="175.50"></text></g><g><title>[unknown] (16 samples, 1.26%)</title><rect x="78.7234%" y="149" width="1.2608%" height="15" fill="rgb(249,139,47)"/><text x="78.9734%" y="159.50"></text></g><g><title>[unknown] (12 samples, 0.95%)</title><rect x="79.0386%" y="133" width="0.9456%" height="15" fill="rgb(244,64,35)"/><text x="79.2886%" y="143.50"></text></g><g><title>[unknown] (8 samples, 0.63%)</title><rect x="79.3538%" y="117" width="0.6304%" height="15" fill="rgb(216,46,15)"/><text x="79.6038%" y="127.50"></text></g><g><title>mio::sys::unix::epoll::Selector::select (75 samples, 5.91%)</title><rect x="79.9842%" y="277" width="5.9102%" height="15" fill="rgb(250,74,19)"/><text x="80.2342%" y="287.50">mio::sys..</text></g><g><title>epoll_wait (62 samples, 4.89%)</title><rect x="81.0087%" y="261" width="4.8857%" height="15" fill="rgb(249,42,33)"/><text x="81.2587%" y="271.50">epoll_..</text></g><g><title>[unknown] (53 samples, 4.18%)</title><rect x="81.7179%" y="245" width="4.1765%" height="15" fill="rgb(242,149,17)"/><text x="81.9679%" y="255.50">[unkn..</text></g><g><title>[unknown] (47 samples, 3.70%)</title><rect x="82.1907%" y="229" width="3.7037%" height="15" fill="rgb(244,29,21)"/><text x="82.4407%" y="239.50">[unk..</text></g><g><title>[unknown] (44 samples, 3.47%)</title><rect x="82.4271%" y="213" width="3.4673%" height="15" fill="rgb(220,130,37)"/><text x="82.6771%" y="223.50">[un..</text></g><g><title>[unknown] (36 samples, 2.84%)</title><rect x="83.0575%" y="197" width="2.8369%" height="15" fill="rgb(211,67,2)"/><text x="83.3075%" y="207.50">[u..</text></g><g><title>[unknown] (32 samples, 2.52%)</title><rect x="83.3727%" y="181" width="2.5217%" height="15" fill="rgb(235,68,52)"/><text x="83.6227%" y="191.50">[u..</text></g><g><title>[unknown] (27 samples, 2.13%)</title><rect x="83.7667%" y="165" width="2.1277%" height="15" fill="rgb(246,142,3)"/><text x="84.0167%" y="175.50">[..</text></g><g><title>[unknown] (5 samples, 0.39%)</title><rect x="85.5004%" y="149" width="0.3940%" height="15" fill="rgb(241,25,7)"/><text x="85.7504%" y="159.50"></text></g><g><title>mio::poll::Poll::poll (130 samples, 10.24%)</title><rect x="76.5957%" y="309" width="10.2443%" height="15" fill="rgb(242,119,39)"/><text x="76.8457%" y="319.50">mio::poll::Poll..</text></g><g><title>mio::poll::Poll::poll1 (127 samples, 10.01%)</title><rect x="76.8322%" y="293" width="10.0079%" height="15" fill="rgb(241,98,45)"/><text x="77.0822%" y="303.50">mio::poll::Pol..</text></g><g><title>std::time::Instant::now (12 samples, 0.95%)</title><rect x="85.8944%" y="277" width="0.9456%" height="15" fill="rgb(254,28,30)"/><text x="86.1444%" y="287.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (12 samples, 0.95%)</title><rect x="85.8944%" y="261" width="0.9456%" height="15" fill="rgb(241,142,54)"/><text x="86.1444%" y="271.50"></text></g><g><title>std::sys::unix::time::inner::now (12 samples, 0.95%)</title><rect x="85.8944%" y="245" width="0.9456%" height="15" fill="rgb(222,85,15)"/><text x="86.1444%" y="255.50"></text></g><g><title>__clock_gettime_2 (11 samples, 0.87%)</title><rect x="85.9732%" y="229" width="0.8668%" height="15" fill="rgb(210,85,47)"/><text x="86.2232%" y="239.50"></text></g><g><title>__vdso_clock_gettime (11 samples, 0.87%)</title><rect x="85.9732%" y="213" width="0.8668%" height="15" fill="rgb(224,206,25)"/><text x="86.2232%" y="223.50"></text></g><g><title>[[vdso]] (11 samples, 0.87%)</title><rect x="85.9732%" y="197" width="0.8668%" height="15" fill="rgb(243,201,19)"/><text x="86.2232%" y="207.50"></text></g><g><title>mio::poll::SetReadiness::set_readiness (4 samples, 0.32%)</title><rect x="86.8400%" y="309" width="0.3152%" height="15" fill="rgb(236,59,4)"/><text x="87.0900%" y="319.50"></text></g><g><title>&lt;tokio::runtime::basic_scheduler::SchedulerPriv as tokio::task::Schedule&gt;::schedule (4 samples, 0.32%)</title><rect x="87.3916%" y="293" width="0.3152%" height="15" fill="rgb(254,179,45)"/><text x="87.6416%" y="303.50"></text></g><g><title>tokio::runtime::basic_scheduler::SchedulerPriv::schedule (5 samples, 0.39%)</title><rect x="87.7069%" y="293" width="0.3940%" height="15" fill="rgb(226,14,10)"/><text x="87.9569%" y="303.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (172 samples, 13.55%)</title><rect x="74.6257%" y="341" width="13.5540%" height="15" fill="rgb(244,27,41)"/><text x="74.8757%" y="351.50">&lt;tokio::io::driver::..</text></g><g><title>tokio::io::driver::Driver::turn (168 samples, 13.24%)</title><rect x="74.9409%" y="325" width="13.2388%" height="15" fill="rgb(235,35,32)"/><text x="75.1909%" y="335.50">tokio::io::driver::D..</text></g><g><title>tokio::task::waker::wake_by_val (13 samples, 1.02%)</title><rect x="87.1552%" y="309" width="1.0244%" height="15" fill="rgb(218,68,31)"/><text x="87.4052%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (2 samples, 0.16%)</title><rect x="89.2041%" y="277" width="0.1576%" height="15" fill="rgb(207,120,37)"/><text x="89.4541%" y="287.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (7 samples, 0.55%)</title><rect x="88.8889%" y="325" width="0.5516%" height="15" fill="rgb(227,98,0)"/><text x="89.1389%" y="335.50"></text></g><g><title>std::time::Instant::duration_since (3 samples, 0.24%)</title><rect x="89.2041%" y="309" width="0.2364%" height="15" fill="rgb(207,7,3)"/><text x="89.4541%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (3 samples, 0.24%)</title><rect x="89.2041%" y="293" width="0.2364%" height="15" fill="rgb(206,98,19)"/><text x="89.4541%" y="303.50"></text></g><g><title>std::time::Instant::now (11 samples, 0.87%)</title><rect x="89.4405%" y="325" width="0.8668%" height="15" fill="rgb(217,5,26)"/><text x="89.6905%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (11 samples, 0.87%)</title><rect x="89.4405%" y="309" width="0.8668%" height="15" fill="rgb(235,190,38)"/><text x="89.6905%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::now (11 samples, 0.87%)</title><rect x="89.4405%" y="293" width="0.8668%" height="15" fill="rgb(247,86,24)"/><text x="89.6905%" y="303.50"></text></g><g><title>__clock_gettime_2 (10 samples, 0.79%)</title><rect x="89.5193%" y="277" width="0.7880%" height="15" fill="rgb(205,101,16)"/><text x="89.7693%" y="287.50"></text></g><g><title>__vdso_clock_gettime (5 samples, 0.39%)</title><rect x="89.9133%" y="261" width="0.3940%" height="15" fill="rgb(246,168,33)"/><text x="90.1633%" y="271.50"></text></g><g><title>[[vdso]] (4 samples, 0.32%)</title><rect x="89.9921%" y="245" width="0.3152%" height="15" fill="rgb(231,114,1)"/><text x="90.2421%" y="255.50"></text></g><g><title>tokio::time::clock::Clock::now (3 samples, 0.24%)</title><rect x="90.3073%" y="325" width="0.2364%" height="15" fill="rgb(207,184,53)"/><text x="90.5573%" y="335.50"></text></g><g><title>tokio::time::driver::Driver&lt;T&gt;::process (34 samples, 2.68%)</title><rect x="88.1797%" y="341" width="2.6793%" height="15" fill="rgb(224,95,51)"/><text x="88.4297%" y="351.50">to..</text></g><g><title>tokio::time::wheel::Wheel&lt;T&gt;::poll (3 samples, 0.24%)</title><rect x="90.6225%" y="325" width="0.2364%" height="15" fill="rgb(212,188,45)"/><text x="90.8725%" y="335.50"></text></g><g><title>&lt;tokio::time::driver::atomic_stack::AtomicStackEntries as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="91.2530%" y="325" width="0.3152%" height="15" fill="rgb(223,154,38)"/><text x="91.5030%" y="335.50"></text></g><g><title>tokio::time::driver::Driver&lt;T&gt;::process_queue (13 samples, 1.02%)</title><rect x="90.8589%" y="341" width="1.0244%" height="15" fill="rgb(251,22,52)"/><text x="91.1089%" y="351.50"></text></g><g><title>tokio::time::driver::atomic_stack::AtomicStack::take (4 samples, 0.32%)</title><rect x="91.5682%" y="325" width="0.3152%" height="15" fill="rgb(229,209,22)"/><text x="91.8182%" y="335.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;T&gt; as tokio::park::Park&gt;::park (233 samples, 18.36%)</title><rect x="73.9165%" y="357" width="18.3609%" height="15" fill="rgb(234,138,34)"/><text x="74.1665%" y="367.50">&lt;tokio::time::driver::Driver&lt;..</text></g><g><title>tokio::time::wheel::Wheel&lt;T&gt;::poll_at (5 samples, 0.39%)</title><rect x="91.8834%" y="341" width="0.3940%" height="15" fill="rgb(212,95,11)"/><text x="92.1334%" y="351.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (13 samples, 1.02%)</title><rect x="93.5382%" y="293" width="1.0244%" height="15" fill="rgb(240,179,47)"/><text x="93.7882%" y="303.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (4 samples, 0.32%)</title><rect x="94.2474%" y="277" width="0.3152%" height="15" fill="rgb(240,163,11)"/><text x="94.4974%" y="287.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (2 samples, 0.16%)</title><rect x="94.5626%" y="293" width="0.1576%" height="15" fill="rgb(236,37,12)"/><text x="94.8126%" y="303.50"></text></g><g><title>__rust_maybe_catch_panic (26 samples, 2.05%)</title><rect x="92.7502%" y="341" width="2.0489%" height="15" fill="rgb(232,164,16)"/><text x="93.0002%" y="351.50">_..</text></g><g><title>std::panicking::try::do_call (21 samples, 1.65%)</title><rect x="93.1442%" y="325" width="1.6548%" height="15" fill="rgb(244,205,15)"/><text x="93.3942%" y="335.50"></text></g><g><title>tokio::task::core::Core&lt;T&gt;::poll (19 samples, 1.50%)</title><rect x="93.3018%" y="309" width="1.4972%" height="15" fill="rgb(223,117,47)"/><text x="93.5518%" y="319.50"></text></g><g><title>tokio::task::core::Header::executor (2 samples, 0.16%)</title><rect x="94.7991%" y="341" width="0.1576%" height="15" fill="rgb(244,107,35)"/><text x="95.0491%" y="351.50"></text></g><g><title>tokio::task::state::Snapshot::is_canceled (4 samples, 0.32%)</title><rect x="94.9567%" y="341" width="0.3152%" height="15" fill="rgb(205,140,8)"/><text x="95.2067%" y="351.50"></text></g><g><title>tokio::task::state::Snapshot::is_join_interested (2 samples, 0.16%)</title><rect x="95.2719%" y="341" width="0.1576%" height="15" fill="rgb(228,84,46)"/><text x="95.5219%" y="351.50"></text></g><g><title>tokio::task::state::Snapshot::is_notified (3 samples, 0.24%)</title><rect x="95.4295%" y="341" width="0.2364%" height="15" fill="rgb(254,188,9)"/><text x="95.6795%" y="351.50"></text></g><g><title>tokio::task::state::State::transition_to_idle (2 samples, 0.16%)</title><rect x="95.6659%" y="341" width="0.1576%" height="15" fill="rgb(206,112,54)"/><text x="95.9159%" y="351.50"></text></g><g><title>tokio::task::harness::Harness&lt;T,S&gt;::poll (46 samples, 3.62%)</title><rect x="92.2774%" y="357" width="3.6249%" height="15" fill="rgb(216,84,49)"/><text x="92.5274%" y="367.50">toki..</text></g><g><title>tokio::task::queue::MpscQueues&lt;S&gt;::drain_pending_drop (7 samples, 0.55%)</title><rect x="95.9023%" y="357" width="0.5516%" height="15" fill="rgb(214,194,35)"/><text x="96.1523%" y="367.50"></text></g><g><title>__GI___pthread_mutex_lock (9 samples, 0.71%)</title><rect x="97.4783%" y="341" width="0.7092%" height="15" fill="rgb(249,28,3)"/><text x="97.7283%" y="351.50"></text></g><g><title>__GI___pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="98.1875%" y="341" width="0.2364%" height="15" fill="rgb(222,56,52)"/><text x="98.4375%" y="351.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (3 samples, 0.24%)</title><rect x="98.4240%" y="341" width="0.2364%" height="15" fill="rgb(245,217,50)"/><text x="98.6740%" y="351.50"></text></g><g><title>tokio::task::queue::MpscQueues&lt;S&gt;::next_remote_task (33 samples, 2.60%)</title><rect x="96.4539%" y="357" width="2.6005%" height="15" fill="rgb(213,201,24)"/><text x="96.7039%" y="367.50">to..</text></g><g><title>std::panicking::panicking (5 samples, 0.39%)</title><rect x="98.6604%" y="341" width="0.3940%" height="15" fill="rgb(248,116,28)"/><text x="98.9104%" y="351.50"></text></g><g><title>std::panicking::update_panic_count (4 samples, 0.32%)</title><rect x="98.7392%" y="325" width="0.3152%" height="15" fill="rgb(219,72,43)"/><text x="98.9892%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.32%)</title><rect x="98.7392%" y="309" width="0.3152%" height="15" fill="rgb(209,138,14)"/><text x="98.9892%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.32%)</title><rect x="98.7392%" y="293" width="0.3152%" height="15" fill="rgb(222,18,33)"/><text x="98.9892%" y="303.50"></text></g><g><title>std::panicking::update_panic_count::PANIC_COUNT::__getit (4 samples, 0.32%)</title><rect x="98.7392%" y="277" width="0.3152%" height="15" fill="rgb(213,199,7)"/><text x="98.9892%" y="287.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (4 samples, 0.32%)</title><rect x="98.7392%" y="261" width="0.3152%" height="15" fill="rgb(250,110,10)"/><text x="98.9892%" y="271.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (4 samples, 0.32%)</title><rect x="98.7392%" y="245" width="0.3152%" height="15" fill="rgb(248,123,6)"/><text x="98.9892%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (4 samples, 0.32%)</title><rect x="98.7392%" y="229" width="0.3152%" height="15" fill="rgb(206,91,31)"/><text x="98.9892%" y="239.50"></text></g><g><title>__GI___clone (436 samples, 34.36%)</title><rect x="65.4058%" y="533" width="34.3578%" height="15" fill="rgb(211,154,13)"/><text x="65.6558%" y="543.50">__GI___clone</text></g><g><title>start_thread (435 samples, 34.28%)</title><rect x="65.4846%" y="517" width="34.2790%" height="15" fill="rgb(225,148,7)"/><text x="65.7346%" y="527.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (432 samples, 34.04%)</title><rect x="65.7210%" y="501" width="34.0426%" height="15" fill="rgb(220,160,43)"/><text x="65.9710%" y="511.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys_common::thread::start_thread (432 samples, 34.04%)</title><rect x="65.7210%" y="485" width="34.0426%" height="15" fill="rgb(213,52,39)"/><text x="65.9710%" y="495.50">std::sys_common::thread::start_thread</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (432 samples, 34.04%)</title><rect x="65.7210%" y="469" width="34.0426%" height="15" fill="rgb(243,137,7)"/><text x="65.9710%" y="479.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (432 samples, 34.04%)</title><rect x="65.7210%" y="453" width="34.0426%" height="15" fill="rgb(230,79,13)"/><text x="65.9710%" y="463.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (432 samples, 34.04%)</title><rect x="65.7210%" y="437" width="34.0426%" height="15" fill="rgb(247,105,23)"/><text x="65.9710%" y="447.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>__rust_maybe_catch_panic (432 samples, 34.04%)</title><rect x="65.7210%" y="421" width="34.0426%" height="15" fill="rgb(223,179,41)"/><text x="65.9710%" y="431.50">__rust_maybe_catch_panic</text></g><g><title>std::panicking::try::do_call (432 samples, 34.04%)</title><rect x="65.7210%" y="405" width="34.0426%" height="15" fill="rgb(218,9,34)"/><text x="65.9710%" y="415.50">std::panicking::try::do_call</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (432 samples, 34.04%)</title><rect x="65.7210%" y="389" width="34.0426%" height="15" fill="rgb(222,106,8)"/><text x="65.9710%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::context::enter (431 samples, 33.96%)</title><rect x="65.7998%" y="373" width="33.9638%" height="15" fill="rgb(211,220,0)"/><text x="66.0498%" y="383.50">tokio::runtime::context::enter</text></g><g><title>tokio::task::raw::RawTask::poll (9 samples, 0.71%)</title><rect x="99.0544%" y="357" width="0.7092%" height="15" fill="rgb(229,52,16)"/><text x="99.3044%" y="367.50"></text></g><g><title>reqwest-interna (822 samples, 64.78%)</title><rect x="35.1458%" y="549" width="64.7754%" height="15" fill="rgb(212,155,18)"/><text x="35.3958%" y="559.50">reqwest-interna</text></g><g><title>__libc_recv (2 samples, 0.16%)</title><rect x="99.7636%" y="533" width="0.1576%" height="15" fill="rgb(242,21,14)"/><text x="100.0136%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.16%)</title><rect x="99.7636%" y="517" width="0.1576%" height="15" fill="rgb(222,19,48)"/><text x="100.0136%" y="527.50"></text></g><g><title>all (1,269 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(232,45,27)"/><text x="0.2500%" y="575.50"></text></g></svg></svg>
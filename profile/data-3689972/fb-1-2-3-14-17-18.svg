<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="645.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="645.00"> </text><svg id="frames" x="10" width="1180"><g><title>__GI___libc_malloc (142 samples, 1.99%)</title><rect x="1.5251%" y="373" width="1.9868%" height="15" fill="rgb(227,0,7)"/><text x="1.7751%" y="383.50">_..</text></g><g><title>_int_malloc (135 samples, 1.89%)</title><rect x="1.6231%" y="357" width="1.8889%" height="15" fill="rgb(217,0,24)"/><text x="1.8731%" y="367.50">_..</text></g><g><title>unlink_chunk.isra.0 (66 samples, 0.92%)</title><rect x="2.5885%" y="341" width="0.9235%" height="15" fill="rgb(221,193,54)"/><text x="2.8385%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (213 samples, 2.98%)</title><rect x="3.5959%" y="373" width="2.9803%" height="15" fill="rgb(248,212,6)"/><text x="3.8459%" y="383.50">__m..</text></g><g><title>malloc_consolidate (361 samples, 5.05%)</title><rect x="7.1778%" y="357" width="5.0511%" height="15" fill="rgb(208,68,35)"/><text x="7.4278%" y="367.50">malloc..</text></g><g><title>unlink_chunk.isra.0 (163 samples, 2.28%)</title><rect x="9.9482%" y="341" width="2.2807%" height="15" fill="rgb(232,128,0)"/><text x="10.1982%" y="351.50">u..</text></g><g><title>_int_free (401 samples, 5.61%)</title><rect x="6.7161%" y="373" width="5.6107%" height="15" fill="rgb(207,160,47)"/><text x="6.9661%" y="383.50">_int_fr..</text></g><g><title>_int_free (75 samples, 1.05%)</title><rect x="13.5302%" y="325" width="1.0494%" height="15" fill="rgb(228,23,34)"/><text x="13.7802%" y="335.50"></text></g><g><title>malloc_consolidate (74 samples, 1.04%)</title><rect x="13.5441%" y="309" width="1.0354%" height="15" fill="rgb(218,30,26)"/><text x="13.7941%" y="319.50"></text></g><g><title>__GI___libc_realloc (81 samples, 1.13%)</title><rect x="13.4602%" y="357" width="1.1333%" height="15" fill="rgb(220,122,19)"/><text x="13.7102%" y="367.50"></text></g><g><title>_int_realloc (80 samples, 1.12%)</title><rect x="13.4742%" y="341" width="1.1194%" height="15" fill="rgb(250,228,42)"/><text x="13.7242%" y="351.50"></text></g><g><title>alloc::slice::merge_sort (173 samples, 2.42%)</title><rect x="12.3269%" y="373" width="2.4206%" height="15" fill="rgb(240,193,28)"/><text x="12.5769%" y="383.50">al..</text></g><g><title>asmap_rs::find_bottleneck::FindBottleneck::format_ip (13 samples, 0.18%)</title><rect x="14.7474%" y="373" width="0.1819%" height="15" fill="rgb(216,20,37)"/><text x="14.9974%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (9 samples, 0.13%)</title><rect x="14.8034%" y="357" width="0.1259%" height="15" fill="rgb(206,188,39)"/><text x="15.0534%" y="367.50"></text></g><g><title>_int_free (38 samples, 0.53%)</title><rect x="16.1746%" y="357" width="0.5317%" height="15" fill="rgb(217,207,13)"/><text x="16.4246%" y="367.50"></text></g><g><title>__GI___libc_malloc (74 samples, 1.04%)</title><rect x="32.7970%" y="341" width="1.0354%" height="15" fill="rgb(231,73,38)"/><text x="33.0470%" y="351.50"></text></g><g><title>_int_malloc (53 samples, 0.74%)</title><rect x="33.0908%" y="325" width="0.7416%" height="15" fill="rgb(225,20,46)"/><text x="33.3408%" y="335.50"></text></g><g><title>_int_free (14 samples, 0.20%)</title><rect x="34.6439%" y="309" width="0.1959%" height="15" fill="rgb(210,31,41)"/><text x="34.8939%" y="319.50"></text></g><g><title>__GI___libc_realloc (88 samples, 1.23%)</title><rect x="33.8324%" y="341" width="1.2313%" height="15" fill="rgb(221,200,47)"/><text x="34.0824%" y="351.50"></text></g><g><title>_int_realloc (67 samples, 0.94%)</title><rect x="34.1262%" y="325" width="0.9375%" height="15" fill="rgb(226,26,5)"/><text x="34.3762%" y="335.50"></text></g><g><title>_int_malloc (16 samples, 0.22%)</title><rect x="34.8398%" y="309" width="0.2239%" height="15" fill="rgb(249,33,26)"/><text x="35.0898%" y="319.50"></text></g><g><title>__rdl_realloc (14 samples, 0.20%)</title><rect x="35.1616%" y="341" width="0.1959%" height="15" fill="rgb(235,183,28)"/><text x="35.4116%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::realloc (12 samples, 0.17%)</title><rect x="35.1896%" y="325" width="0.1679%" height="15" fill="rgb(221,5,38)"/><text x="35.4396%" y="335.50"></text></g><g><title>__rust_realloc (12 samples, 0.17%)</title><rect x="35.3995%" y="341" width="0.1679%" height="15" fill="rgb(247,18,42)"/><text x="35.6495%" y="351.50"></text></g><g><title>_int_free (18 samples, 0.25%)</title><rect x="35.5674%" y="341" width="0.2519%" height="15" fill="rgb(241,131,45)"/><text x="35.8174%" y="351.50"></text></g><g><title>asmap_rs::as_path_parser::AsPathParser::parse (1,481 samples, 20.72%)</title><rect x="16.7063%" y="357" width="20.7220%" height="15" fill="rgb(249,31,29)"/><text x="16.9563%" y="367.50">asmap_rs::as_path_parser::AsPathP..</text></g><g><title>asmap_rs::as_path_parser::AsPathParser::parse_u32 (115 samples, 1.61%)</title><rect x="35.8192%" y="341" width="1.6091%" height="15" fill="rgb(225,111,53)"/><text x="36.0692%" y="351.50"></text></g><g><title>__memcmp_avx2_movbe (17 samples, 0.24%)</title><rect x="38.3657%" y="341" width="0.2379%" height="15" fill="rgb(238,160,17)"/><text x="38.6157%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (144 samples, 2.01%)</title><rect x="38.6176%" y="341" width="2.0148%" height="15" fill="rgb(214,148,48)"/><text x="38.8676%" y="351.50">h..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (73 samples, 1.02%)</title><rect x="39.6110%" y="325" width="1.0214%" height="15" fill="rgb(232,36,49)"/><text x="39.8610%" y="335.50"></text></g><g><title>[unknown] (21 samples, 0.29%)</title><rect x="41.9057%" y="277" width="0.2938%" height="15" fill="rgb(209,103,24)"/><text x="42.1557%" y="287.50"></text></g><g><title>[unknown] (17 samples, 0.24%)</title><rect x="41.9617%" y="261" width="0.2379%" height="15" fill="rgb(229,88,8)"/><text x="42.2117%" y="271.50"></text></g><g><title>[unknown] (13 samples, 0.18%)</title><rect x="42.0176%" y="245" width="0.1819%" height="15" fill="rgb(213,181,19)"/><text x="42.2676%" y="255.50"></text></g><g><title>[unknown] (8 samples, 0.11%)</title><rect x="42.0876%" y="229" width="0.1119%" height="15" fill="rgb(254,191,54)"/><text x="42.3376%" y="239.50"></text></g><g><title>__GI___libc_malloc (62 samples, 0.87%)</title><rect x="41.7238%" y="309" width="0.8675%" height="15" fill="rgb(241,83,37)"/><text x="41.9738%" y="319.50"></text></g><g><title>_int_malloc (59 samples, 0.83%)</title><rect x="41.7658%" y="293" width="0.8255%" height="15" fill="rgb(233,36,39)"/><text x="42.0158%" y="303.50"></text></g><g><title>malloc_consolidate (28 samples, 0.39%)</title><rect x="42.1995%" y="277" width="0.3918%" height="15" fill="rgb(226,3,54)"/><text x="42.4495%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (100 samples, 1.40%)</title><rect x="42.7312%" y="309" width="1.3992%" height="15" fill="rgb(245,192,40)"/><text x="42.9812%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (50 samples, 0.70%)</title><rect x="43.4308%" y="293" width="0.6996%" height="15" fill="rgb(238,167,29)"/><text x="43.6808%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (482 samples, 6.74%)</title><rect x="37.4283%" y="357" width="6.7441%" height="15" fill="rgb(232,182,51)"/><text x="37.6783%" y="367.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (253 samples, 3.54%)</title><rect x="40.6324%" y="341" width="3.5399%" height="15" fill="rgb(231,60,39)"/><text x="40.8824%" y="351.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (225 samples, 3.15%)</title><rect x="41.0242%" y="325" width="3.1482%" height="15" fill="rgb(208,69,12)"/><text x="41.2742%" y="335.50">has..</text></g><g><title>&lt;asmap_rs::address::Address as core::hash::Hash&gt;::hash (70 samples, 0.98%)</title><rect x="46.5930%" y="341" width="0.9794%" height="15" fill="rgb(235,93,37)"/><text x="46.8430%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (50 samples, 0.70%)</title><rect x="46.8728%" y="325" width="0.6996%" height="15" fill="rgb(213,116,39)"/><text x="47.1228%" y="335.50"></text></g><g><title>asmap_rs::find_bottleneck::FindBottleneck::match_rib_entry (2,346 samples, 32.82%)</title><rect x="14.9293%" y="373" width="32.8250%" height="15" fill="rgb(222,207,29)"/><text x="15.1793%" y="383.50">asmap_rs::find_bottleneck::FindBottleneck::match_rib_..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (256 samples, 3.58%)</title><rect x="44.1724%" y="357" width="3.5819%" height="15" fill="rgb(206,96,30)"/><text x="44.4224%" y="367.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (8 samples, 0.11%)</title><rect x="47.6424%" y="341" width="0.1119%" height="15" fill="rgb(218,138,4)"/><text x="47.8924%" y="351.50"></text></g><g><title>__GI___libc_free (184 samples, 2.57%)</title><rect x="48.1181%" y="357" width="2.5745%" height="15" fill="rgb(250,191,14)"/><text x="48.3681%" y="367.50">__..</text></g><g><title>core::ptr::real_drop_in_place (257 samples, 3.60%)</title><rect x="47.7543%" y="373" width="3.5959%" height="15" fill="rgb(239,60,40)"/><text x="48.0043%" y="383.50">core..</text></g><g><title>_int_free (47 samples, 0.66%)</title><rect x="50.6926%" y="357" width="0.6576%" height="15" fill="rgb(206,27,48)"/><text x="50.9426%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (25 samples, 0.35%)</title><rect x="51.3642%" y="373" width="0.3498%" height="15" fill="rgb(225,35,8)"/><text x="51.6142%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (20 samples, 0.28%)</title><rect x="51.4342%" y="357" width="0.2798%" height="15" fill="rgb(250,213,24)"/><text x="51.6842%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (18 samples, 0.25%)</title><rect x="51.4622%" y="341" width="0.2519%" height="15" fill="rgb(247,123,22)"/><text x="51.7122%" y="351.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.18%)</title><rect x="51.5321%" y="325" width="0.1819%" height="15" fill="rgb(231,138,38)"/><text x="51.7821%" y="335.50"></text></g><g><title>_int_malloc (13 samples, 0.18%)</title><rect x="51.5321%" y="309" width="0.1819%" height="15" fill="rgb(231,145,46)"/><text x="51.7821%" y="319.50"></text></g><g><title>malloc_consolidate (13 samples, 0.18%)</title><rect x="51.5321%" y="293" width="0.1819%" height="15" fill="rgb(251,118,11)"/><text x="51.7821%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (23 samples, 0.32%)</title><rect x="51.7140%" y="373" width="0.3218%" height="15" fill="rgb(217,147,25)"/><text x="51.9640%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (9 samples, 0.13%)</title><rect x="51.9099%" y="357" width="0.1259%" height="15" fill="rgb(247,81,37)"/><text x="52.1599%" y="367.50"></text></g><g><title>__calloc (14 samples, 0.20%)</title><rect x="53.6589%" y="325" width="0.1959%" height="15" fill="rgb(209,12,38)"/><text x="53.9089%" y="335.50"></text></g><g><title>_int_malloc (9 samples, 0.13%)</title><rect x="53.7288%" y="309" width="0.1259%" height="15" fill="rgb(227,1,9)"/><text x="53.9788%" y="319.50"></text></g><g><title>__memset_avx2_unaligned_erms (8 samples, 0.11%)</title><rect x="55.3379%" y="293" width="0.1119%" height="15" fill="rgb(248,47,43)"/><text x="55.5879%" y="303.50"></text></g><g><title>__calloc (208 samples, 2.91%)</title><rect x="54.3445%" y="309" width="2.9103%" height="15" fill="rgb(221,10,30)"/><text x="54.5945%" y="319.50">__..</text></g><g><title>_int_malloc (129 samples, 1.80%)</title><rect x="55.4498%" y="293" width="1.8050%" height="15" fill="rgb(210,229,1)"/><text x="55.6998%" y="303.50">_..</text></g><g><title>__rdl_alloc_zeroed (9 samples, 0.13%)</title><rect x="57.2548%" y="309" width="0.1259%" height="15" fill="rgb(222,148,37)"/><text x="57.5048%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (8 samples, 0.11%)</title><rect x="57.2688%" y="293" width="0.1119%" height="15" fill="rgb(234,67,33)"/><text x="57.5188%" y="303.50"></text></g><g><title>core::ptr::real_drop_in_place (37 samples, 0.52%)</title><rect x="62.8515%" y="261" width="0.5177%" height="15" fill="rgb(247,98,35)"/><text x="63.1015%" y="271.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (600 samples, 8.40%)</title><rect x="63.4812%" y="245" width="8.3951%" height="15" fill="rgb(247,138,52)"/><text x="63.7312%" y="255.50">crc32fast::b..</text></g><g><title>crc32fast::Hasher::update (626 samples, 8.76%)</title><rect x="63.3692%" y="261" width="8.7589%" height="15" fill="rgb(213,79,30)"/><text x="63.6192%" y="271.50">crc32fast::H..</text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (18 samples, 0.25%)</title><rect x="71.8763%" y="245" width="0.2519%" height="15" fill="rgb(246,177,23)"/><text x="72.1263%" y="255.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::total_out (64 samples, 0.90%)</title><rect x="73.0656%" y="245" width="0.8955%" height="15" fill="rgb(230,62,27)"/><text x="73.3156%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned (30 samples, 0.42%)</title><rect x="92.5703%" y="181" width="0.4198%" height="15" fill="rgb(216,154,8)"/><text x="92.8203%" y="191.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (1,390 samples, 19.45%)</title><rect x="73.9611%" y="245" width="19.4487%" height="15" fill="rgb(244,35,45)"/><text x="74.2111%" y="255.50">&lt;flate2::mem::Decompress as fl..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (1,373 samples, 19.21%)</title><rect x="74.1990%" y="229" width="19.2109%" height="15" fill="rgb(251,115,12)"/><text x="74.4490%" y="239.50">&lt;flate2::ffi::c::Inflate as fl..</text></g><g><title>inflate (1,284 samples, 17.97%)</title><rect x="75.4442%" y="213" width="17.9656%" height="15" fill="rgb(240,54,50)"/><text x="75.6942%" y="223.50">inflate</text></g><g><title>[libz.so.1.2.11] (334 samples, 4.67%)</title><rect x="88.7365%" y="197" width="4.6733%" height="15" fill="rgb(233,84,52)"/><text x="88.9865%" y="207.50">[libz..</text></g><g><title>__memmove_avx_unaligned_erms (30 samples, 0.42%)</title><rect x="92.9901%" y="181" width="0.4198%" height="15" fill="rgb(207,117,47)"/><text x="93.2401%" y="191.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::total_in (14 samples, 0.20%)</title><rect x="93.4098%" y="245" width="0.1959%" height="15" fill="rgb(249,43,39)"/><text x="93.6598%" y="255.50"></text></g><g><title>mrt_rs::records::tabledump::RIBEntry::parse (2,854 samples, 39.93%)</title><rect x="53.8827%" y="325" width="39.9328%" height="15" fill="rgb(209,38,44)"/><text x="54.1327%" y="335.50">mrt_rs::records::tabledump::RIBEntry::parse</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (2,599 samples, 36.36%)</title><rect x="57.4507%" y="309" width="36.3649%" height="15" fill="rgb(236,212,23)"/><text x="57.7007%" y="319.50">std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact</text></g><g><title>std::io::Read::read_exact (2,581 samples, 36.11%)</title><rect x="57.7025%" y="293" width="36.1131%" height="15" fill="rgb(242,79,21)"/><text x="57.9525%" y="303.50">std::io::Read::read_exact</text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (2,505 samples, 35.05%)</title><rect x="58.7659%" y="277" width="35.0497%" height="15" fill="rgb(211,96,35)"/><text x="59.0159%" y="287.50">&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read</text></g><g><title>flate2::zio::read (1,546 samples, 21.63%)</title><rect x="72.1841%" y="261" width="21.6315%" height="15" fill="rgb(253,215,40)"/><text x="72.4341%" y="271.50">flate2::zio::read</text></g><g><title>&lt;flate2::mem::FlushCompress as flate2::zio::Flush&gt;::none (15 samples, 0.21%)</title><rect x="93.6057%" y="245" width="0.2099%" height="15" fill="rgb(211,81,21)"/><text x="93.8557%" y="255.50"></text></g><g><title>crc32fast::Hasher::update (13 samples, 0.18%)</title><rect x="94.2214%" y="277" width="0.1819%" height="15" fill="rgb(208,190,38)"/><text x="94.4714%" y="287.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (13 samples, 0.18%)</title><rect x="94.2214%" y="261" width="0.1819%" height="15" fill="rgb(235,213,38)"/><text x="94.4714%" y="271.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (73 samples, 1.02%)</title><rect x="94.5432%" y="261" width="1.0214%" height="15" fill="rgb(237,122,38)"/><text x="94.7932%" y="271.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (73 samples, 1.02%)</title><rect x="94.5432%" y="245" width="1.0214%" height="15" fill="rgb(244,218,35)"/><text x="94.7932%" y="255.50"></text></g><g><title>inflate (67 samples, 0.94%)</title><rect x="94.6271%" y="229" width="0.9375%" height="15" fill="rgb(240,68,47)"/><text x="94.8771%" y="239.50"></text></g><g><title>[libz.so.1.2.11] (12 samples, 0.17%)</title><rect x="95.3967%" y="213" width="0.1679%" height="15" fill="rgb(210,16,53)"/><text x="95.6467%" y="223.50"></text></g><g><title>mrt_rs::records::tabledump::TABLE_DUMP_V2::parse (3,115 samples, 43.58%)</title><rect x="52.0778%" y="357" width="43.5847%" height="15" fill="rgb(235,124,12)"/><text x="52.3278%" y="367.50">mrt_rs::records::tabledump::TABLE_DUMP_V2::parse</text></g><g><title>mrt_rs::records::tabledump::RIB_AFI::parse (3,112 samples, 43.54%)</title><rect x="52.1198%" y="341" width="43.5427%" height="15" fill="rgb(224,169,11)"/><text x="52.3698%" y="351.50">mrt_rs::records::tabledump::RIB_AFI::parse</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_exact (132 samples, 1.85%)</title><rect x="93.8156%" y="325" width="1.8469%" height="15" fill="rgb(250,166,2)"/><text x="94.0656%" y="335.50">s..</text></g><g><title>std::io::Read::read_exact (132 samples, 1.85%)</title><rect x="93.8156%" y="309" width="1.8469%" height="15" fill="rgb(242,216,29)"/><text x="94.0656%" y="319.50">s..</text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (126 samples, 1.76%)</title><rect x="93.8995%" y="293" width="1.7630%" height="15" fill="rgb(230,116,27)"/><text x="94.1495%" y="303.50"></text></g><g><title>flate2::zio::read (90 samples, 1.26%)</title><rect x="94.4032%" y="277" width="1.2593%" height="15" fill="rgb(228,99,48)"/><text x="94.6532%" y="287.50"></text></g><g><title>crc32fast::Hasher::update (15 samples, 0.21%)</title><rect x="95.9983%" y="325" width="0.2099%" height="15" fill="rgb(253,11,6)"/><text x="96.2483%" y="335.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (15 samples, 0.21%)</title><rect x="95.9983%" y="309" width="0.2099%" height="15" fill="rgb(247,143,39)"/><text x="96.2483%" y="319.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (60 samples, 0.84%)</title><rect x="96.3341%" y="309" width="0.8395%" height="15" fill="rgb(236,97,10)"/><text x="96.5841%" y="319.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (58 samples, 0.81%)</title><rect x="96.3621%" y="293" width="0.8115%" height="15" fill="rgb(233,208,19)"/><text x="96.6121%" y="303.50"></text></g><g><title>inflate (49 samples, 0.69%)</title><rect x="96.4880%" y="277" width="0.6856%" height="15" fill="rgb(216,164,2)"/><text x="96.7380%" y="287.50"></text></g><g><title>[libz.so.1.2.11] (17 samples, 0.24%)</title><rect x="96.9358%" y="261" width="0.2379%" height="15" fill="rgb(220,129,5)"/><text x="97.1858%" y="271.50"></text></g><g><title>asmap_rs::find_bottleneck::FindBottleneck::locate (6,940 samples, 97.10%)</title><rect x="0.1679%" y="389" width="97.1037%" height="15" fill="rgb(242,17,10)"/><text x="0.4179%" y="399.50">asmap_rs::find_bottleneck::FindBottleneck::locate</text></g><g><title>mrt_rs::Reader&lt;T&gt;::read (3,233 samples, 45.24%)</title><rect x="52.0358%" y="373" width="45.2358%" height="15" fill="rgb(242,107,0)"/><text x="52.2858%" y="383.50">mrt_rs::Reader&lt;T&gt;::read</text></g><g><title>std::io::Read::read_exact (115 samples, 1.61%)</title><rect x="95.6625%" y="357" width="1.6091%" height="15" fill="rgb(251,28,31)"/><text x="95.9125%" y="367.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (109 samples, 1.53%)</title><rect x="95.7465%" y="341" width="1.5251%" height="15" fill="rgb(233,223,10)"/><text x="95.9965%" y="351.50"></text></g><g><title>flate2::zio::read (75 samples, 1.05%)</title><rect x="96.2222%" y="325" width="1.0494%" height="15" fill="rgb(215,21,27)"/><text x="96.4722%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.13%)</title><rect x="97.3276%" y="245" width="0.1259%" height="15" fill="rgb(232,23,21)"/><text x="97.5776%" y="255.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 0.15%)</title><rect x="97.3136%" y="309" width="0.1539%" height="15" fill="rgb(244,5,23)"/><text x="97.5636%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (10 samples, 0.14%)</title><rect x="97.3276%" y="293" width="0.1399%" height="15" fill="rgb(226,81,46)"/><text x="97.5776%" y="303.50"></text></g><g><title>alloc::string::String::push_str (10 samples, 0.14%)</title><rect x="97.3276%" y="277" width="0.1399%" height="15" fill="rgb(247,70,30)"/><text x="97.5776%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (10 samples, 0.14%)</title><rect x="97.3276%" y="261" width="0.1399%" height="15" fill="rgb(212,68,19)"/><text x="97.5776%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.13%)</title><rect x="97.5934%" y="213" width="0.1259%" height="15" fill="rgb(240,187,13)"/><text x="97.8434%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (9 samples, 0.13%)</title><rect x="97.5934%" y="197" width="0.1259%" height="15" fill="rgb(223,113,26)"/><text x="97.8434%" y="207.50"></text></g><g><title>alloc::string::String::push_str (9 samples, 0.13%)</title><rect x="97.5934%" y="181" width="0.1259%" height="15" fill="rgb(206,192,2)"/><text x="97.8434%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.13%)</title><rect x="97.5934%" y="165" width="0.1259%" height="15" fill="rgb(241,108,4)"/><text x="97.8434%" y="175.50"></text></g><g><title>&lt;std::net::ip::IpAddr as core::fmt::Display&gt;::fmt (22 samples, 0.31%)</title><rect x="97.4675%" y="309" width="0.3078%" height="15" fill="rgb(247,173,49)"/><text x="97.7175%" y="319.50"></text></g><g><title>&lt;std::net::ip::Ipv4Addr as core::fmt::Display&gt;::fmt (21 samples, 0.29%)</title><rect x="97.4815%" y="293" width="0.2938%" height="15" fill="rgb(224,114,35)"/><text x="97.7315%" y="303.50"></text></g><g><title>core::fmt::Formatter::write_fmt (21 samples, 0.29%)</title><rect x="97.4815%" y="277" width="0.2938%" height="15" fill="rgb(245,159,27)"/><text x="97.7315%" y="287.50"></text></g><g><title>core::fmt::write (21 samples, 0.29%)</title><rect x="97.4815%" y="261" width="0.2938%" height="15" fill="rgb(245,172,44)"/><text x="97.7315%" y="271.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (17 samples, 0.24%)</title><rect x="97.5374%" y="245" width="0.2379%" height="15" fill="rgb(236,23,11)"/><text x="97.7874%" y="255.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (15 samples, 0.21%)</title><rect x="97.5654%" y="229" width="0.2099%" height="15" fill="rgb(205,117,38)"/><text x="97.8154%" y="239.50"></text></g><g><title>core::fmt::Formatter::pad_integral (8 samples, 0.11%)</title><rect x="98.0132%" y="277" width="0.1119%" height="15" fill="rgb(237,72,25)"/><text x="98.2632%" y="287.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (22 samples, 0.31%)</title><rect x="97.8452%" y="309" width="0.3078%" height="15" fill="rgb(244,70,9)"/><text x="98.0952%" y="319.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (21 samples, 0.29%)</title><rect x="97.8592%" y="293" width="0.2938%" height="15" fill="rgb(217,125,39)"/><text x="98.1092%" y="303.50"></text></g><g><title>alloc::fmt::format (68 samples, 0.95%)</title><rect x="97.2856%" y="357" width="0.9514%" height="15" fill="rgb(235,36,10)"/><text x="97.5356%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (67 samples, 0.94%)</title><rect x="97.2996%" y="341" width="0.9375%" height="15" fill="rgb(251,123,47)"/><text x="97.5496%" y="351.50"></text></g><g><title>core::fmt::write (67 samples, 0.94%)</title><rect x="97.2996%" y="325" width="0.9375%" height="15" fill="rgb(221,13,13)"/><text x="97.5496%" y="335.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (115 samples, 1.61%)</title><rect x="98.3210%" y="325" width="1.6091%" height="15" fill="rgb(238,131,9)"/><text x="98.5710%" y="335.50"></text></g><g><title>std::io::Write::write_all (114 samples, 1.60%)</title><rect x="98.3350%" y="309" width="1.5951%" height="15" fill="rgb(211,50,8)"/><text x="98.5850%" y="319.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (112 samples, 1.57%)</title><rect x="98.3629%" y="293" width="1.5671%" height="15" fill="rgb(245,182,24)"/><text x="98.6129%" y="303.50"></text></g><g><title>std::sys::unix::fs::File::write (111 samples, 1.55%)</title><rect x="98.3769%" y="277" width="1.5531%" height="15" fill="rgb(242,14,37)"/><text x="98.6269%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (111 samples, 1.55%)</title><rect x="98.3769%" y="261" width="1.5531%" height="15" fill="rgb(246,228,12)"/><text x="98.6269%" y="271.50"></text></g><g><title>__libc_write (111 samples, 1.55%)</title><rect x="98.3769%" y="245" width="1.5531%" height="15" fill="rgb(213,55,15)"/><text x="98.6269%" y="255.50"></text></g><g><title>[unknown] (111 samples, 1.55%)</title><rect x="98.3769%" y="229" width="1.5531%" height="15" fill="rgb(209,9,3)"/><text x="98.6269%" y="239.50"></text></g><g><title>[unknown] (96 samples, 1.34%)</title><rect x="98.5868%" y="213" width="1.3432%" height="15" fill="rgb(230,59,30)"/><text x="98.8368%" y="223.50"></text></g><g><title>[unknown] (94 samples, 1.32%)</title><rect x="98.6148%" y="197" width="1.3152%" height="15" fill="rgb(209,121,21)"/><text x="98.8648%" y="207.50"></text></g><g><title>[unknown] (87 samples, 1.22%)</title><rect x="98.7127%" y="181" width="1.2173%" height="15" fill="rgb(220,109,13)"/><text x="98.9627%" y="191.50"></text></g><g><title>[unknown] (82 samples, 1.15%)</title><rect x="98.7827%" y="165" width="1.1473%" height="15" fill="rgb(232,18,1)"/><text x="99.0327%" y="175.50"></text></g><g><title>[unknown] (67 samples, 0.94%)</title><rect x="98.9926%" y="149" width="0.9375%" height="15" fill="rgb(215,41,42)"/><text x="99.2426%" y="159.50"></text></g><g><title>[unknown] (60 samples, 0.84%)</title><rect x="99.0905%" y="133" width="0.8395%" height="15" fill="rgb(224,123,36)"/><text x="99.3405%" y="143.50"></text></g><g><title>[unknown] (60 samples, 0.84%)</title><rect x="99.0905%" y="117" width="0.8395%" height="15" fill="rgb(240,125,3)"/><text x="99.3405%" y="127.50"></text></g><g><title>[unknown] (59 samples, 0.83%)</title><rect x="99.1045%" y="101" width="0.8255%" height="15" fill="rgb(205,98,50)"/><text x="99.3545%" y="111.50"></text></g><g><title>[unknown] (38 samples, 0.53%)</title><rect x="99.3983%" y="85" width="0.5317%" height="15" fill="rgb(205,185,37)"/><text x="99.6483%" y="95.50"></text></g><g><title>[unknown] (30 samples, 0.42%)</title><rect x="99.5103%" y="69" width="0.4198%" height="15" fill="rgb(238,207,15)"/><text x="99.7603%" y="79.50"></text></g><g><title>[unknown] (22 samples, 0.31%)</title><rect x="99.6222%" y="53" width="0.3078%" height="15" fill="rgb(213,199,42)"/><text x="99.8722%" y="63.50"></text></g><g><title>[unknown] (10 samples, 0.14%)</title><rect x="99.7901%" y="37" width="0.1399%" height="15" fill="rgb(235,201,11)"/><text x="100.0401%" y="47.50"></text></g><g><title>__libc_start_main (7,131 samples, 99.78%)</title><rect x="0.1679%" y="565" width="99.7761%" height="15" fill="rgb(207,46,11)"/><text x="0.4179%" y="575.50">__libc_start_main</text></g><g><title>main (7,131 samples, 99.78%)</title><rect x="0.1679%" y="549" width="99.7761%" height="15" fill="rgb(241,35,35)"/><text x="0.4179%" y="559.50">main</text></g><g><title>std::rt::lang_start_internal (7,131 samples, 99.78%)</title><rect x="0.1679%" y="533" width="99.7761%" height="15" fill="rgb(243,32,47)"/><text x="0.4179%" y="543.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (7,131 samples, 99.78%)</title><rect x="0.1679%" y="517" width="99.7761%" height="15" fill="rgb(247,202,23)"/><text x="0.4179%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (7,131 samples, 99.78%)</title><rect x="0.1679%" y="501" width="99.7761%" height="15" fill="rgb(219,102,11)"/><text x="0.4179%" y="511.50">std::panicking::try</text></g><g><title>__rust_maybe_catch_panic (7,131 samples, 99.78%)</title><rect x="0.1679%" y="485" width="99.7761%" height="15" fill="rgb(243,110,44)"/><text x="0.4179%" y="495.50">__rust_maybe_catch_panic</text></g><g><title>std::panicking::try::do_call (7,131 samples, 99.78%)</title><rect x="0.1679%" y="469" width="99.7761%" height="15" fill="rgb(222,74,54)"/><text x="0.4179%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (7,131 samples, 99.78%)</title><rect x="0.1679%" y="453" width="99.7761%" height="15" fill="rgb(216,99,12)"/><text x="0.4179%" y="463.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::rt::lang_start::_{{closure}} (7,131 samples, 99.78%)</title><rect x="0.1679%" y="437" width="99.7761%" height="15" fill="rgb(226,22,26)"/><text x="0.4179%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>asmap_rs::main (7,131 samples, 99.78%)</title><rect x="0.1679%" y="421" width="99.7761%" height="15" fill="rgb(217,163,10)"/><text x="0.4179%" y="431.50">asmap_rs::main</text></g><g><title>asmap_rs::subcommand::Subcommand::run (7,131 samples, 99.78%)</title><rect x="0.1679%" y="405" width="99.7761%" height="15" fill="rgb(213,25,53)"/><text x="0.4179%" y="415.50">asmap_rs::subcommand::Subcommand::run</text></g><g><title>asmap_rs::find_bottleneck::FindBottleneck::write (191 samples, 2.67%)</title><rect x="97.2716%" y="389" width="2.6724%" height="15" fill="rgb(252,105,26)"/><text x="97.5216%" y="399.50">as..</text></g><g><title>asmap_rs::find_bottleneck::FindBottleneck::write_bottleneck (191 samples, 2.67%)</title><rect x="97.2716%" y="373" width="2.6724%" height="15" fill="rgb(220,39,43)"/><text x="97.5216%" y="383.50">as..</text></g><g><title>std::io::Write::write_fmt (122 samples, 1.71%)</title><rect x="98.2370%" y="357" width="1.7070%" height="15" fill="rgb(229,68,48)"/><text x="98.4870%" y="367.50"></text></g><g><title>core::fmt::write (118 samples, 1.65%)</title><rect x="98.2930%" y="341" width="1.6510%" height="15" fill="rgb(252,8,32)"/><text x="98.5430%" y="351.50"></text></g><g><title>all (7,147 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="623.50"></text></g><g><title>asmap-rs (7,147 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="607.50">asmap-rs</text></g><g><title>_start (7,136 samples, 99.85%)</title><rect x="0.1539%" y="581" width="99.8461%" height="15" fill="rgb(236,28,36)"/><text x="0.4039%" y="591.50">_start</text></g></svg></svg>